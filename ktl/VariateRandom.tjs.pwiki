*目次 [#contents-]
#contents



*概要 [#summaries-]
 様々な乱数生成エンジンと確率分布など。
-パス:~
--[[ktl/VariateRandom.tjs]]~
-インポートスクリプト:~
--[[ktl/Sources.tjs]]~
-インポートDLL:~
--ktl_variate_random.dll / ktl_variate_random-d.dll(デバッグ版)~



*クラス [#class-]
-クラス:~
--[[VariateRandom クラス>#VariateRandom]]~

> (生成エンジン)~

--[[MinstdRand0 クラス>#MinstdRand0]]~
--[[MinstdRand クラス>#MinstdRand]]~
--[[Rand48 クラス>#Rand48]]~
--[[Ecuyer1988 クラス>#Ecuyer1988]]~
--[[KnuthB クラス>#KnuthB]]~
--[[Kreutzer1986 クラス>#Kreutzer1986]]~
--[[Taus88 クラス>#Taus88]]~
--[[Hellekalek1995 クラス>#Hellekalek1995]]~
--[[MT11213b クラス>#MT11213b]]~
--[[MT19937 クラス>#MT19937]]~
--[[MT19937_64 クラス>#MT19937_64]]~
--[[LaggedFibonacci607 クラス>#LaggedFibonacci607]]~
--[[LaggedFibonacci1279 クラス>#LaggedFibonacci1279]]~
--[[LaggedFibonacci2281 クラス>#LaggedFibonacci2281]]~
--[[LaggedFibonacci3217 クラス>#LaggedFibonacci3217]]~
--[[LaggedFibonacci4423 クラス>#LaggedFibonacci4423]]~
--[[LaggedFibonacci9689 クラス>#LaggedFibonacci9689]]~
--[[LaggedFibonacci9937 クラス>#LaggedFibonacci9937]]~
--[[LaggedFibonacci23209 クラス>#LaggedFibonacci23209]]~
--[[LaggedFibonacci44497 クラス>#LaggedFibonacci44497]]~
--[[Ranlux3 クラス>#Ranlux3]]~
--[[Ranlux4 クラス>#Ranlux4]]~
--[[Ranlux64_3 クラス>#Ranlux64_3]]~
--[[Ranlux64_4 クラス>#Ranlux64_4]]~
--[[Ranlux3_01 クラス>#Ranlux3_01]]~
--[[Ranlux4_01 クラス>#Ranlux4_01]]~
--[[Ranlux64_3_01 クラス>#Ranlux64_3_01]]~
--[[Ranlux64_4_01 クラス>#Ranlux64_4_01]]~
--[[RandomDevice クラス>#RandomDevice]]~

> (確率分布)~

--[[UniformSmallint クラス>#UniformSmallint]]~
--[[UniformIntDistribution クラス>#UniformIntDistribution]]~
--[[UniformInt クラス>#UniformInt]]~
--[[Uniform01 クラス>#Uniform01]]~
--[[UniformRealDistribution クラス>#UniformRealDistribution]]~
--[[UniformReal クラス>#UniformReal]]~
--[[BernoulliDistribution クラス>#BernoulliDistribution]]~
--[[BinomialDistribution クラス>#BinomialDistribution]]~
--[[GeometricDistribution クラス>#GeometricDistribution]]~
--[[NegativeBinomialDistribution クラス>#NegativeBinomialDistribution]]~
--[[PoissonDistribution クラス>#PoissonDistribution]]~
--[[ExponentialDistribution クラス>#ExponentialDistribution]]~
--[[GammaDistribution クラス>#GammaDistribution]]~
--[[WeibullDistribution クラス>#WeibullDistribution]]~
--[[ExtremeValueDistribution クラス>#ExtremeValueDistribution]]~
--[[BetaDistribution クラス>#BetaDistribution]]~
--[[LaplaceDistribution クラス>#LaplaceDistribution]]~
--[[NormalDistribution クラス>#NormalDistribution]]~
--[[LognormalDistribution クラス>#LognormalDistribution]]~
--[[ChiSquaredDistribution クラス>#ChiSquaredDistribution]]~
--[[NonCentralChiSquaredDistribution クラス>#NonCentralChiSquaredDistribution]]~
--[[CauchyDistribution クラス>#CauchyDistribution]]~
--[[FisherFDistribution クラス>#FisherFDistribution]]~
--[[StudentTDistribution クラス>#StudentTDistribution]]~
--[[DiscreteDistribution クラス>#DiscreteDistribution]]~
--[[PiecewiseConstantDistribution クラス>#PiecewiseConstantDistribution]]~
--[[PiecewiseLinearDistribution クラス>#PiecewiseLinearDistribution]]~
--[[TriangleDistribution クラス>#TriangleDistribution]]~
--[[UniformOnSphere クラス>#UniformOnSphere]]~

--------------------------------------------------------------------------------

**VariateRandom クラス [#VariateRandom]
 乱数生成エンジンと確率分布を組み合わせた、最適化された呼出しを行うクラス。
-メソッド:~
--[[VariateRandom メソッド>#VariateRandom-VariateRandom]]~
--[[random メソッド>#VariateRandom-random]]~
-プロパティ:~
--[[engine プロパティ>#VariateRandom-engine]]~
--[[distribution プロパティ>#VariateRandom-distribution]]~
-プロパティ:~
--[[min プロパティ>#VariateRandom-min]]~
--[[max プロパティ>#VariateRandom-max]]~

--------------------------------------------------------------------------------
-VariateRandom.VariateRandom メソッド &aname(VariateRandom-VariateRandom);~
 コンストラクタ。
--シグネチャ:~
---VariateRandom()~
---VariateRandom(engine)~
---VariateRandom(engine, distribution)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
---distribution~
確率分布クラスのインスタンス。~

--------------------------------------------------------------------------------
-VariateRandom.random メソッド &aname(VariateRandom-random);~
 確率分布に従った乱数値を生成する。
--シグネチャ:~
---VariateRandom.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-VariateRandom.engine プロパティ &aname(VariateRandom-engine);~
 乱数生成エンジンクラスのインスタンスを返す。 (getter)

--------------------------------------------------------------------------------
-VariateRandom.distribution プロパティ &aname(VariateRandom-distribution);~
 確率分布クラスのインスタンスを返す。 (getter)

--------------------------------------------------------------------------------

-VariateRandom.min プロパティ &aname(VariateRandom-min);~
 確率分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-VariateRandom.max プロパティ &aname(VariateRandom-max);~
 確率分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**MinstdRand0 クラス [#MinstdRand0]
 線形合同法エンジンの疑似乱数生成エンジンクラス。
 周期 2^31-2，精度 32bit 符号無し整数．
-メソッド:~
--[[MinstdRand0 メソッド>#MinstdRand0-MinstdRand0]]~
--[[random メソッド>#MinstdRand0-random]]~
--[[seed メソッド>#MinstdRand0-seed]]~
--[[randomize メソッド>#MinstdRand0-randomize]]~
--[[serialize メソッド>#MinstdRand0-serialize]]~
--[[deserialize メソッド>#MinstdRand0-deserialize]]~
-プロパティ:~
--[[min プロパティ>#MinstdRand0-min]]~
--[[max プロパティ>#MinstdRand0-max]]~

--------------------------------------------------------------------------------
-MinstdRand0.MinstdRand0 メソッド &aname(MinstdRand0-MinstdRand0);~
 コンストラクタ。
--シグネチャ:~
---MinstdRand0(seed = 1)~
---MinstdRand0(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-MinstdRand0.random メソッド &aname(MinstdRand0-random);~
 乱数値を生成する。
--シグネチャ:~
---MinstdRand0.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-MinstdRand0.seed メソッド &aname(MinstdRand0-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---MinstdRand0.seed(seed = 1)~
---MinstdRand0.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MinstdRand0.randomize メソッド &aname(MinstdRand0-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---MinstdRand0.randomize(seed = 1)~
---MinstdRand0.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[MinstdRand0.seed メソッド>#MinstdRand0-seed]] を参照。~

--------------------------------------------------------------------------------
-MinstdRand0.serialize メソッド &aname(MinstdRand0-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---MinstdRand0.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-MinstdRand0.deserialize メソッド &aname(MinstdRand0-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---MinstdRand0.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MinstdRand0.min プロパティ &aname(MinstdRand0-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-MinstdRand0.max プロパティ &aname(MinstdRand0-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**MinstdRand クラス [#MinstdRand]
 線形合同法エンジンの疑似乱数生成エンジンクラス。
 周期 2^31-2，精度 32bit 符号無し整数．
-メソッド:~
--[[MinstdRand メソッド>#MinstdRand-MinstdRand]]~
--[[random メソッド>#MinstdRand-random]]~
--[[seed メソッド>#MinstdRand-seed]]~
--[[randomize メソッド>#MinstdRand-randomize]]~
--[[serialize メソッド>#MinstdRand-serialize]]~
--[[deserialize メソッド>#MinstdRand-deserialize]]~
-プロパティ:~
--[[min プロパティ>#MinstdRand-min]]~
--[[max プロパティ>#MinstdRand-max]]~

--------------------------------------------------------------------------------
-MinstdRand.MinstdRand メソッド &aname(MinstdRand-MinstdRand);~
 コンストラクタ。
--シグネチャ:~
---MinstdRand(seed = 1)~
---MinstdRand(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-MinstdRand.random メソッド &aname(MinstdRand-random);~
 乱数値を生成する。
--シグネチャ:~
---MinstdRand.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-MinstdRand.seed メソッド &aname(MinstdRand-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---MinstdRand.seed(seed = 1)~
---MinstdRand.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MinstdRand.randomize メソッド &aname(MinstdRand-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---MinstdRand.randomize(seed = 1)~
---MinstdRand.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[MinstdRand.seed メソッド>#MinstdRand-seed]] を参照。~

--------------------------------------------------------------------------------
-MinstdRand.serialize メソッド &aname(MinstdRand-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---MinstdRand.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-MinstdRand.deserialize メソッド &aname(MinstdRand-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---MinstdRand.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MinstdRand.min プロパティ &aname(MinstdRand-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-MinstdRand.max プロパティ &aname(MinstdRand-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Rand48 クラス [#Rand48]
 線形合同法エンジンの疑似乱数生成エンジンクラス。
 周期 2^48-1，精度 32bit 符号無し整数．
-メソッド:~
--[[Rand48 メソッド>#Rand48-Rand48]]~
--[[random メソッド>#Rand48-random]]~
--[[seed メソッド>#Rand48-seed]]~
--[[randomize メソッド>#Rand48-randomize]]~
--[[serialize メソッド>#Rand48-serialize]]~
--[[deserialize メソッド>#Rand48-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Rand48-min]]~
--[[max プロパティ>#Rand48-max]]~

--------------------------------------------------------------------------------
-Rand48.Rand48 メソッド &aname(Rand48-Rand48);~
 コンストラクタ。
--シグネチャ:~
---Rand48(seed = 1)~
---Rand48(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Rand48.random メソッド &aname(Rand48-random);~
 乱数値を生成する。
--シグネチャ:~
---Rand48.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Rand48.seed メソッド &aname(Rand48-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Rand48.seed(seed = 1)~
---Rand48.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Rand48.randomize メソッド &aname(Rand48-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Rand48.randomize(seed = 1)~
---Rand48.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Rand48.seed メソッド>#Rand48-seed]] を参照。~

--------------------------------------------------------------------------------
-Rand48.serialize メソッド &aname(Rand48-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Rand48.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Rand48.deserialize メソッド &aname(Rand48-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Rand48.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Rand48.min プロパティ &aname(Rand48-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Rand48.max プロパティ &aname(Rand48-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ecuyer1988 クラス [#Ecuyer1988]
 L'Ecuyer(1988) による疑似乱数生成エンジンクラス。
 周期 約2^61，精度 32bit 符号無し整数．
-メソッド:~
--[[Ecuyer1988 メソッド>#Ecuyer1988-Ecuyer1988]]~
--[[random メソッド>#Ecuyer1988-random]]~
--[[seed メソッド>#Ecuyer1988-seed]]~
--[[randomize メソッド>#Ecuyer1988-randomize]]~
--[[serialize メソッド>#Ecuyer1988-serialize]]~
--[[deserialize メソッド>#Ecuyer1988-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ecuyer1988-min]]~
--[[max プロパティ>#Ecuyer1988-max]]~

--------------------------------------------------------------------------------
-Ecuyer1988.Ecuyer1988 メソッド &aname(Ecuyer1988-Ecuyer1988);~
 コンストラクタ。
--シグネチャ:~
---Ecuyer1988()~
---Ecuyer1988(seed)~
---Ecuyer1988(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ecuyer1988.random メソッド &aname(Ecuyer1988-random);~
 乱数値を生成する。
--シグネチャ:~
---Ecuyer1988.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ecuyer1988.seed メソッド &aname(Ecuyer1988-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ecuyer1988.seed()~
---Ecuyer1988.seed(seed)~
---Ecuyer1988.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ecuyer1988.randomize メソッド &aname(Ecuyer1988-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ecuyer1988.randomize(seed = 1)~
---Ecuyer1988.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ecuyer1988.seed メソッド>#Ecuyer1988-seed]] を参照。~

--------------------------------------------------------------------------------
-Ecuyer1988.serialize メソッド &aname(Ecuyer1988-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ecuyer1988.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ecuyer1988.deserialize メソッド &aname(Ecuyer1988-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ecuyer1988.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ecuyer1988.min プロパティ &aname(Ecuyer1988-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ecuyer1988.max プロパティ &aname(Ecuyer1988-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**KnuthB クラス [#KnuthB]
 順序シャッフルによる疑似乱数生成エンジンクラス。
 周期 不明，精度 32bit 符号無し整数．
-メソッド:~
--[[KnuthB メソッド>#KnuthB-KnuthB]]~
--[[random メソッド>#KnuthB-random]]~
--[[seed メソッド>#KnuthB-seed]]~
--[[randomize メソッド>#KnuthB-randomize]]~
--[[serialize メソッド>#KnuthB-serialize]]~
--[[deserialize メソッド>#KnuthB-deserialize]]~
-プロパティ:~
--[[min プロパティ>#KnuthB-min]]~
--[[max プロパティ>#KnuthB-max]]~

--------------------------------------------------------------------------------
-KnuthB.KnuthB メソッド &aname(KnuthB-KnuthB);~
 コンストラクタ。
--シグネチャ:~
---KnuthB()~
---KnuthB(seed)~
---KnuthB(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-KnuthB.random メソッド &aname(KnuthB-random);~
 乱数値を生成する。
--シグネチャ:~
---KnuthB.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-KnuthB.seed メソッド &aname(KnuthB-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---KnuthB.seed()~
---KnuthB.seed(seed)~
---KnuthB.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-KnuthB.randomize メソッド &aname(KnuthB-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---KnuthB.randomize(seed = 1)~
---KnuthB.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[KnuthB.seed メソッド>#KnuthB-seed]] を参照。~

--------------------------------------------------------------------------------
-KnuthB.serialize メソッド &aname(KnuthB-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---KnuthB.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-KnuthB.deserialize メソッド &aname(KnuthB-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---KnuthB.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-KnuthB.min プロパティ &aname(KnuthB-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-KnuthB.max プロパティ &aname(KnuthB-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Kreutzer1986 クラス [#Kreutzer1986]
 順序シャッフルによる疑似乱数生成エンジンクラス。
 周期 不明，精度 32bit 符号無し整数．
-メソッド:~
--[[Kreutzer1986 メソッド>#Kreutzer1986-Kreutzer1986]]~
--[[random メソッド>#Kreutzer1986-random]]~
--[[seed メソッド>#Kreutzer1986-seed]]~
--[[randomize メソッド>#Kreutzer1986-randomize]]~
--[[serialize メソッド>#Kreutzer1986-serialize]]~
--[[deserialize メソッド>#Kreutzer1986-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Kreutzer1986-min]]~
--[[max プロパティ>#Kreutzer1986-max]]~

--------------------------------------------------------------------------------
-Kreutzer1986.Kreutzer1986 メソッド &aname(Kreutzer1986-Kreutzer1986);~
 コンストラクタ。
--シグネチャ:~
---Kreutzer1986()~
---Kreutzer1986(seed)~
---Kreutzer1986(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Kreutzer1986.random メソッド &aname(Kreutzer1986-random);~
 乱数値を生成する。
--シグネチャ:~
---Kreutzer1986.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Kreutzer1986.seed メソッド &aname(Kreutzer1986-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Kreutzer1986.seed()~
---Kreutzer1986.seed(seed)~
---Kreutzer1986.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Kreutzer1986.randomize メソッド &aname(Kreutzer1986-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Kreutzer1986.randomize(seed = 1)~
---Kreutzer1986.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Kreutzer1986.seed メソッド>#Kreutzer1986-seed]] を参照。~

--------------------------------------------------------------------------------
-Kreutzer1986.serialize メソッド &aname(Kreutzer1986-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Kreutzer1986.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Kreutzer1986.deserialize メソッド &aname(Kreutzer1986-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Kreutzer1986.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Kreutzer1986.min プロパティ &aname(Kreutzer1986-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Kreutzer1986.max プロパティ &aname(Kreutzer1986-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Taus88 クラス [#Taus88]
 組み合わせ分布による疑似乱数生成エンジンクラス。
 周期 〜2^82，精度 32bit 符号無し整数．
-メソッド:~
--[[Taus88 メソッド>#Taus88-Taus88]]~
--[[random メソッド>#Taus88-random]]~
--[[seed メソッド>#Taus88-seed]]~
--[[randomize メソッド>#Taus88-randomize]]~
--[[serialize メソッド>#Taus88-serialize]]~
--[[deserialize メソッド>#Taus88-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Taus88-min]]~
--[[max プロパティ>#Taus88-max]]~

--------------------------------------------------------------------------------
-Taus88.Taus88 メソッド &aname(Taus88-Taus88);~
 コンストラクタ。
--シグネチャ:~
---Taus88()~
---Taus88(seed)~
---Taus88(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Taus88.random メソッド &aname(Taus88-random);~
 乱数値を生成する。
--シグネチャ:~
---Taus88.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Taus88.seed メソッド &aname(Taus88-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Taus88.seed()~
---Taus88.seed(seed)~
---Taus88.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Taus88.randomize メソッド &aname(Taus88-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Taus88.randomize(seed = 1)~
---Taus88.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Taus88.seed メソッド>#Taus88-seed]] を参照。~

--------------------------------------------------------------------------------
-Taus88.serialize メソッド &aname(Taus88-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Taus88.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Taus88.deserialize メソッド &aname(Taus88-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Taus88.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Taus88.min プロパティ &aname(Taus88-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Taus88.max プロパティ &aname(Taus88-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Hellekalek1995 クラス [#Hellekalek1995]
 Peter Hellekalek(1995) による疑似乱数生成エンジンクラス。
 周期 2^31-1，精度 32bit 符号無し整数．
-メソッド:~
--[[Hellekalek1995 メソッド>#Hellekalek1995-Hellekalek1995]]~
--[[random メソッド>#Hellekalek1995-random]]~
--[[seed メソッド>#Hellekalek1995-seed]]~
--[[randomize メソッド>#Hellekalek1995-randomize]]~
--[[serialize メソッド>#Hellekalek1995-serialize]]~
--[[deserialize メソッド>#Hellekalek1995-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Hellekalek1995-min]]~
--[[max プロパティ>#Hellekalek1995-max]]~

--------------------------------------------------------------------------------
-Hellekalek1995.Hellekalek1995 メソッド &aname(Hellekalek1995-Hellekalek1995);~
 コンストラクタ。
--シグネチャ:~
---Hellekalek1995(seed = 1)~
---Hellekalek1995(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Hellekalek1995.random メソッド &aname(Hellekalek1995-random);~
 乱数値を生成する。
--シグネチャ:~
---Hellekalek1995.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Hellekalek1995.seed メソッド &aname(Hellekalek1995-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Hellekalek1995.seed(seed = 1)~
---Hellekalek1995.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Hellekalek1995.randomize メソッド &aname(Hellekalek1995-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Hellekalek1995.randomize(seed = 1)~
---Hellekalek1995.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Hellekalek1995.seed メソッド>#Hellekalek1995-seed]] を参照。~

--------------------------------------------------------------------------------
-Hellekalek1995.serialize メソッド &aname(Hellekalek1995-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Hellekalek1995.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Hellekalek1995.deserialize メソッド &aname(Hellekalek1995-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Hellekalek1995.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Hellekalek1995.min プロパティ &aname(Hellekalek1995-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Hellekalek1995.max プロパティ &aname(Hellekalek1995-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**MT11213b クラス [#MT11213b]
 メルセンヌツイスタ法の疑似乱数生成エンジンクラス。
 周期 2^11213-1 ，精度 32bit 符号無し整数．
-メソッド:~
--[[MT11213b メソッド>#MT11213b-MT11213b]]~
--[[random メソッド>#MT11213b-random]]~
--[[seed メソッド>#MT11213b-seed]]~
--[[randomize メソッド>#MT11213b-randomize]]~
--[[serialize メソッド>#MT11213b-serialize]]~
--[[deserialize メソッド>#MT11213b-deserialize]]~
-プロパティ:~
--[[min プロパティ>#MT11213b-min]]~
--[[max プロパティ>#MT11213b-max]]~

--------------------------------------------------------------------------------
-MT11213b.MT11213b メソッド &aname(MT11213b-MT11213b);~
 コンストラクタ。
--シグネチャ:~
---MT11213b()~
---MT11213b(seed)~
---MT11213b(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-MT11213b.random メソッド &aname(MT11213b-random);~
 乱数値を生成する。
--シグネチャ:~
---MT11213b.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-MT11213b.seed メソッド &aname(MT11213b-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---MT11213b.seed()~
---MT11213b.seed(seed)~
---MT11213b.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MT11213b.randomize メソッド &aname(MT11213b-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---MT11213b.randomize()~
---MT11213b.randomize(seed)~
---MT11213b.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[MT11213b.seed メソッド>#MT11213b-seed]] を参照。~

--------------------------------------------------------------------------------
-MT11213b.serialize メソッド &aname(MT11213b-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---MT11213b.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-MT11213b.deserialize メソッド &aname(MT11213b-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---MT11213b.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MT11213b.min プロパティ &aname(MT11213b-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-MT11213b.max プロパティ &aname(MT11213b-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**MT19937 クラス [#MT19937]
 メルセンヌツイスタ法の疑似乱数生成エンジンクラス。
 周期 2^19937-1 ，精度 32bit 符号無し整数．
-メソッド:~
--[[MT19937 メソッド>#MT19937-MT19937]]~
--[[random メソッド>#MT19937-random]]~
--[[seed メソッド>#MT19937-seed]]~
--[[randomize メソッド>#MT19937-randomize]]~
--[[serialize メソッド>#MT19937-serialize]]~
--[[deserialize メソッド>#MT19937-deserialize]]~
-プロパティ:~
--[[min プロパティ>#MT19937-min]]~
--[[max プロパティ>#MT19937-max]]~

--------------------------------------------------------------------------------
-MT19937.MT19937 メソッド &aname(MT19937-MT19937);~
 コンストラクタ。
--シグネチャ:~
---MT19937()~
---MT19937(seed)~
---MT19937(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-MT19937.random メソッド &aname(MT19937-random);~
 乱数値を生成する。
--シグネチャ:~
---MT19937.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-MT19937.seed メソッド &aname(MT19937-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---MT19937.seed()~
---MT19937.seed(seed)~
---MT19937.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MT19937.randomize メソッド &aname(MT19937-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---MT19937.randomize()~
---MT19937.randomize(seed)~
---MT19937.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[MT19937.seed メソッド>#MT19937-seed]] を参照。~

--------------------------------------------------------------------------------
-MT19937.serialize メソッド &aname(MT19937-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---MT19937.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-MT19937.deserialize メソッド &aname(MT19937-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---MT19937.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MT19937.min プロパティ &aname(MT19937-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-MT19937.max プロパティ &aname(MT19937-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**MT19937_64 クラス [#MT19937_64]
 メルセンヌツイスタ法の疑似乱数生成エンジンクラス。
 周期 2^19937-1 ，精度 64bit 符号無し整数．
-メソッド:~
--[[MT19937_64 メソッド>#MT19937_64-MT19937_64]]~
--[[random メソッド>#MT19937_64-random]]~
--[[seed メソッド>#MT19937_64-seed]]~
--[[randomize メソッド>#MT19937_64-randomize]]~
--[[serialize メソッド>#MT19937_64-serialize]]~
--[[deserialize メソッド>#MT19937_64-deserialize]]~
-プロパティ:~
--[[min プロパティ>#MT19937_64-min]]~
--[[max プロパティ>#MT19937_64-max]]~
-注記:~
このクラスは内部で 64bit 符号無し整数で処理しているが、吉里吉里で扱う整数型は 64bit 符号付き整数であるため、表現可能な最大値を越えた場合、同じビット表現の負値として返される。~
正値として扱われる表現範囲：（0x0〜0x7FFFFFFFFFFFFFFF == 0〜9223372036854775807）~
負値として扱われる表現範囲：（0x800000000000〜0xFFFFFFFFFFFFFFFF == 9223372036854775808〜18446744073709551615）~

--------------------------------------------------------------------------------
-MT19937_64.MT19937_64 メソッド &aname(MT19937_64-MT19937_64);~
 コンストラクタ。
--シグネチャ:~
---MT19937_64()~
---MT19937_64(seed)~
---MT19937_64(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-MT19937_64.random メソッド &aname(MT19937_64-random);~
 乱数値を生成する。
--シグネチャ:~
---MT19937_64.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-MT19937_64.seed メソッド &aname(MT19937_64-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---MT19937_64.seed()~
---MT19937_64.seed(seed)~
---MT19937_64.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MT19937_64.randomize メソッド &aname(MT19937_64-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---MT19937_64.randomize()~
---MT19937_64.randomize(seed)~
---MT19937_64.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[MT19937_64.seed メソッド>#MT19937_64-seed]] を参照。~

--------------------------------------------------------------------------------
-MT19937_64.serialize メソッド &aname(MT19937_64-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---MT19937_64.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-MT19937_64.deserialize メソッド &aname(MT19937_64-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---MT19937_64.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-MT19937_64.min プロパティ &aname(MT19937_64-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-MT19937_64.max プロパティ &aname(MT19937_64-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci607 クラス [#LaggedFibonacci607]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^32000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci607 メソッド>#LF607-LaggedFibonacci607]]~
--[[random メソッド>#LF607-random]]~
--[[seed メソッド>#LF607-seed]]~
--[[randomize メソッド>#LF607-randomize]]~
--[[serialize メソッド>#LF607-serialize]]~
--[[deserialize メソッド>#LF607-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF607-min]]~
--[[max プロパティ>#LF607-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci607.LaggedFibonacci607 メソッド &aname(LF607-LaggedFibonacci607);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci607()~
---LaggedFibonacci607(seed)~
---LaggedFibonacci607(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci607.random メソッド &aname(LF607-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci607.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci607.seed メソッド &aname(LF607-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci607.seed()~
---LaggedFibonacci607.seed(seed)~
---LaggedFibonacci607.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci607.randomize メソッド &aname(LF607-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci607.randomize()~
---LaggedFibonacci607.randomize(seed)~
---LaggedFibonacci607.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci607.seed メソッド>#LF607-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci607.serialize メソッド &aname(LF607-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci607.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci607.deserialize メソッド &aname(LF607-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci607.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci607.min プロパティ &aname(LF607-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci607.max プロパティ &aname(LF607-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci1279 クラス [#LaggedFibonacci1279]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^67000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci1279 メソッド>#LF1279-LaggedFibonacci1279]]~
--[[random メソッド>#LF1279-random]]~
--[[seed メソッド>#LF1279-seed]]~
--[[randomize メソッド>#LF1279-randomize]]~
--[[serialize メソッド>#LF1279-serialize]]~
--[[deserialize メソッド>#LF1279-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF1279-min]]~
--[[max プロパティ>#LF1279-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.LaggedFibonacci1279 メソッド &aname(LF1279-LaggedFibonacci1279);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci1279()~
---LaggedFibonacci1279(seed)~
---LaggedFibonacci1279(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.random メソッド &aname(LF1279-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci1279.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.seed メソッド &aname(LF1279-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci1279.seed()~
---LaggedFibonacci1279.seed(seed)~
---LaggedFibonacci1279.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.randomize メソッド &aname(LF1279-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci1279.randomize()~
---LaggedFibonacci1279.randomize(seed)~
---LaggedFibonacci1279.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci1279.seed メソッド>#LF1279-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.serialize メソッド &aname(LF1279-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci1279.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.deserialize メソッド &aname(LF1279-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci1279.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci1279.min プロパティ &aname(LF1279-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci1279.max プロパティ &aname(LF1279-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci2281 クラス [#LaggedFibonacci2281]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^120000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci2281 メソッド>#LF2281-LaggedFibonacci2281]]~
--[[random メソッド>#LF2281-random]]~
--[[seed メソッド>#LF2281-seed]]~
--[[randomize メソッド>#LF2281-randomize]]~
--[[serialize メソッド>#LF2281-serialize]]~
--[[deserialize メソッド>#LF2281-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF2281-min]]~
--[[max プロパティ>#LF2281-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.LaggedFibonacci2281 メソッド &aname(LF2281-LaggedFibonacci2281);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci2281()~
---LaggedFibonacci2281(seed)~
---LaggedFibonacci2281(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.random メソッド &aname(LF2281-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci2281.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.seed メソッド &aname(LF2281-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci2281.seed()~
---LaggedFibonacci2281.seed(seed)~
---LaggedFibonacci2281.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.randomize メソッド &aname(LF2281-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci2281.randomize()~
---LaggedFibonacci2281.randomize(seed)~
---LaggedFibonacci2281.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci2281.seed メソッド>#LF2281-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.serialize メソッド &aname(LF2281-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci2281.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.deserialize メソッド &aname(LF2281-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci2281.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci2281.min プロパティ &aname(LF2281-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci2281.max プロパティ &aname(LF2281-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci3217 クラス [#LaggedFibonacci3217]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^170000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci3217 メソッド>#LF3217-LaggedFibonacci3217]]~
--[[random メソッド>#LF3217-random]]~
--[[seed メソッド>#LF3217-seed]]~
--[[randomize メソッド>#LF3217-randomize]]~
--[[serialize メソッド>#LF3217-serialize]]~
--[[deserialize メソッド>#LF3217-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF3217-min]]~
--[[max プロパティ>#LF3217-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.LaggedFibonacci3217 メソッド &aname(LF3217-LaggedFibonacci3217);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci3217()~
---LaggedFibonacci3217(seed)~
---LaggedFibonacci3217(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.random メソッド &aname(LF3217-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci3217.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.seed メソッド &aname(LF3217-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci3217.seed()~
---LaggedFibonacci3217.seed(seed)~
---LaggedFibonacci3217.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.randomize メソッド &aname(LF3217-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci3217.randomize()~
---LaggedFibonacci3217.randomize(seed)~
---LaggedFibonacci3217.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci3217.seed メソッド>#LF3217-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.serialize メソッド &aname(LF3217-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci3217.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.deserialize メソッド &aname(LF3217-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci3217.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci3217.min プロパティ &aname(LF3217-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci3217.max プロパティ &aname(LF3217-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci4423 クラス [#LaggedFibonacci4423]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^230000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci4423 メソッド>#LF4423-LaggedFibonacci4423]]~
--[[random メソッド>#LF4423-random]]~
--[[seed メソッド>#LF4423-seed]]~
--[[randomize メソッド>#LF4423-randomize]]~
--[[serialize メソッド>#LF4423-serialize]]~
--[[deserialize メソッド>#LF4423-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF4423-min]]~
--[[max プロパティ>#LF4423-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.LaggedFibonacci4423 メソッド &aname(LF4423-LaggedFibonacci4423);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci4423()~
---LaggedFibonacci4423(seed)~
---LaggedFibonacci4423(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.random メソッド &aname(LF4423-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci4423.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.seed メソッド &aname(LF4423-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci4423.seed()~
---LaggedFibonacci4423.seed(seed)~
---LaggedFibonacci4423.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.randomize メソッド &aname(LF4423-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci4423.randomize()~
---LaggedFibonacci4423.randomize(seed)~
---LaggedFibonacci4423.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci4423.seed メソッド>#LF4423-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.serialize メソッド &aname(LF4423-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci4423.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.deserialize メソッド &aname(LF4423-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci4423.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci4423.min プロパティ &aname(LF4423-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci4423.max プロパティ &aname(LF4423-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci9689 クラス [#LaggedFibonacci9689]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^510000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci9689 メソッド>#LF9689-LaggedFibonacci9689]]~
--[[random メソッド>#LF9689-random]]~
--[[seed メソッド>#LF9689-seed]]~
--[[randomize メソッド>#LF9689-randomize]]~
--[[serialize メソッド>#LF9689-serialize]]~
--[[deserialize メソッド>#LF9689-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF9689-min]]~
--[[max プロパティ>#LF9689-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.LaggedFibonacci9689 メソッド &aname(LF9689-LaggedFibonacci9689);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci9689()~
---LaggedFibonacci9689(seed)~
---LaggedFibonacci9689(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.random メソッド &aname(LF9689-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci9689.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.seed メソッド &aname(LF9689-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci9689.seed()~
---LaggedFibonacci9689.seed(seed)~
---LaggedFibonacci9689.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.randomize メソッド &aname(LF9689-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci9689.randomize()~
---LaggedFibonacci9689.randomize(seed)~
---LaggedFibonacci9689.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci9689.seed メソッド>#LF9689-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.serialize メソッド &aname(LF9689-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci9689.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.deserialize メソッド &aname(LF9689-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci9689.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci9689.min プロパティ &aname(LF9689-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci9689.max プロパティ &aname(LF9689-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci9937 クラス [#LaggedFibonacci9937]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^1050000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci9937 メソッド>#LF9937-LaggedFibonacci9937]]~
--[[random メソッド>#LF9937-random]]~
--[[seed メソッド>#LF9937-seed]]~
--[[randomize メソッド>#LF9937-randomize]]~
--[[serialize メソッド>#LF9937-serialize]]~
--[[deserialize メソッド>#LF9937-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF9937-min]]~
--[[max プロパティ>#LF9937-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.LaggedFibonacci9937 メソッド &aname(LF9937-LaggedFibonacci9937);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci9937()~
---LaggedFibonacci9937(seed)~
---LaggedFibonacci9937(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.random メソッド &aname(LF9937-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci9937.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.seed メソッド &aname(LF9937-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci9937.seed()~
---LaggedFibonacci9937.seed(seed)~
---LaggedFibonacci9937.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.randomize メソッド &aname(LF9937-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci9937.randomize()~
---LaggedFibonacci9937.randomize(seed)~
---LaggedFibonacci9937.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci9937.seed メソッド>#LF9937-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.serialize メソッド &aname(LF9937-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci9937.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.deserialize メソッド &aname(LF9937-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci9937.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci9937.min プロパティ &aname(LF9937-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci9937.max プロパティ &aname(LF9937-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci23209 クラス [#LaggedFibonacci23209]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^1200000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci23209 メソッド>#LF23209-LaggedFibonacci23209]]~
--[[random メソッド>#LF23209-random]]~
--[[seed メソッド>#LF23209-seed]]~
--[[randomize メソッド>#LF23209-randomize]]~
--[[serialize メソッド>#LF23209-serialize]]~
--[[deserialize メソッド>#LF23209-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF23209-min]]~
--[[max プロパティ>#LF23209-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.LaggedFibonacci23209 メソッド &aname(LF23209-LaggedFibonacci23209);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci23209()~
---LaggedFibonacci23209(seed)~
---LaggedFibonacci23209(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.random メソッド &aname(LF23209-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci23209.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.seed メソッド &aname(LF23209-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci23209.seed()~
---LaggedFibonacci23209.seed(seed)~
---LaggedFibonacci23209.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.randomize メソッド &aname(LF23209-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci23209.randomize()~
---LaggedFibonacci23209.randomize(seed)~
---LaggedFibonacci23209.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci23209.seed メソッド>#LF23209-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.serialize メソッド &aname(LF23209-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci23209.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.deserialize メソッド &aname(LF23209-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci23209.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci23209.min プロパティ &aname(LF23209-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci23209.max プロパティ &aname(LF23209-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaggedFibonacci44497 クラス [#LaggedFibonacci44497]
 Lagged Fibonacci 法の疑似乱数生成エンジンクラス。
 周期 〜2^2300000 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[LaggedFibonacci44497 メソッド>#LF44497-LaggedFibonacci44497]]~
--[[random メソッド>#LF44497-random]]~
--[[seed メソッド>#LF44497-seed]]~
--[[randomize メソッド>#LF44497-randomize]]~
--[[serialize メソッド>#LF44497-serialize]]~
--[[deserialize メソッド>#LF44497-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LF44497-min]]~
--[[max プロパティ>#LF44497-max]]~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.LaggedFibonacci44497 メソッド &aname(LF44497-LaggedFibonacci44497);~
 コンストラクタ。
--シグネチャ:~
---LaggedFibonacci44497()~
---LaggedFibonacci44497(seed)~
---LaggedFibonacci44497(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.random メソッド &aname(LF44497-random);~
 乱数値を生成する。
--シグネチャ:~
---LaggedFibonacci44497.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.seed メソッド &aname(LF44497-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---LaggedFibonacci44497.seed()~
---LaggedFibonacci44497.seed(seed)~
---LaggedFibonacci44497.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.randomize メソッド &aname(LF44497-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---LaggedFibonacci44497.randomize()~
---LaggedFibonacci44497.randomize(seed)~
---LaggedFibonacci44497.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[LaggedFibonacci44497.seed メソッド>#LF44497-seed]] を参照。~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.serialize メソッド &aname(LF44497-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---LaggedFibonacci44497.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.deserialize メソッド &aname(LF44497-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---LaggedFibonacci44497.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaggedFibonacci44497.min プロパティ &aname(LF44497-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaggedFibonacci44497.max プロパティ &aname(LF44497-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux3 クラス [#Ranlux3]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 32bit 符号付き整数．
-メソッド:~
--[[Ranlux3 メソッド>#Ranlux3-Ranlux3]]~
--[[random メソッド>#Ranlux3-random]]~
--[[seed メソッド>#Ranlux3-seed]]~
--[[randomize メソッド>#Ranlux3-randomize]]~
--[[serialize メソッド>#Ranlux3-serialize]]~
--[[deserialize メソッド>#Ranlux3-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux3-min]]~
--[[max プロパティ>#Ranlux3-max]]~

--------------------------------------------------------------------------------
-Ranlux3.Ranlux3 メソッド &aname(Ranlux3-Ranlux3);~
 コンストラクタ。
--シグネチャ:~
---Ranlux3()~
---Ranlux3(seed)~
---Ranlux3(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux3.random メソッド &aname(Ranlux3-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux3.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux3.seed メソッド &aname(Ranlux3-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux3.seed()~
---Ranlux3.seed(seed)~
---Ranlux3.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux3.randomize メソッド &aname(Ranlux3-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux3.randomize()~
---Ranlux3.randomize(seed)~
---Ranlux3.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux3.seed メソッド>#Ranlux3-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux3.serialize メソッド &aname(Ranlux3-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux3.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux3.deserialize メソッド &aname(Ranlux3-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux3.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux3.min プロパティ &aname(Ranlux3-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux3.max プロパティ &aname(Ranlux3-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux4 クラス [#Ranlux4]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 32bit 符号付き整数．
-メソッド:~
--[[Ranlux4 メソッド>#Ranlux4-Ranlux4]]~
--[[random メソッド>#Ranlux4-random]]~
--[[seed メソッド>#Ranlux4-seed]]~
--[[randomize メソッド>#Ranlux4-randomize]]~
--[[serialize メソッド>#Ranlux4-serialize]]~
--[[deserialize メソッド>#Ranlux4-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux4-min]]~
--[[max プロパティ>#Ranlux4-max]]~

--------------------------------------------------------------------------------
-Ranlux4.Ranlux4 メソッド &aname(Ranlux4-Ranlux4);~
 コンストラクタ。
--シグネチャ:~
---Ranlux4()~
---Ranlux4(seed)~
---Ranlux4(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux4.random メソッド &aname(Ranlux4-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux4.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux4.seed メソッド &aname(Ranlux4-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux4.seed()~
---Ranlux4.seed(seed)~
---Ranlux4.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux4.randomize メソッド &aname(Ranlux4-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux4.randomize()~
---Ranlux4.randomize(seed)~
---Ranlux4.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux4.seed メソッド>#Ranlux4-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux4.serialize メソッド &aname(Ranlux4-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux4.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux4.deserialize メソッド &aname(Ranlux4-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux4.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux4.min プロパティ &aname(Ranlux4-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux4.max プロパティ &aname(Ranlux4-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux64_3 クラス [#Ranlux64_3]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 64bit 符号付き整数．
-メソッド:~
--[[Ranlux64_3 メソッド>#Ranlux64_3-Ranlux64_3]]~
--[[random メソッド>#Ranlux64_3-random]]~
--[[seed メソッド>#Ranlux64_3-seed]]~
--[[randomize メソッド>#Ranlux64_3-randomize]]~
--[[serialize メソッド>#Ranlux64_3-serialize]]~
--[[deserialize メソッド>#Ranlux64_3-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux64_3-min]]~
--[[max プロパティ>#Ranlux64_3-max]]~

--------------------------------------------------------------------------------
-Ranlux64_3.Ranlux64_3 メソッド &aname(Ranlux64_3-Ranlux64_3);~
 コンストラクタ。
--シグネチャ:~
---Ranlux64_3()~
---Ranlux64_3(seed)~
---Ranlux64_3(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux64_3.random メソッド &aname(Ranlux64_3-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux64_3.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux64_3.seed メソッド &aname(Ranlux64_3-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux64_3.seed()~
---Ranlux64_3.seed(seed)~
---Ranlux64_3.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_3.randomize メソッド &aname(Ranlux64_3-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux64_3.randomize()~
---Ranlux64_3.randomize(seed)~
---Ranlux64_3.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux64_3.seed メソッド>#Ranlux64_3-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux64_3.serialize メソッド &aname(Ranlux64_3-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux64_3.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux64_3.deserialize メソッド &aname(Ranlux64_3-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux64_3.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_3.min プロパティ &aname(Ranlux64_3-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux64_3.max プロパティ &aname(Ranlux64_3-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux64_4 クラス [#Ranlux64_4]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 64bit 符号付き整数．
-メソッド:~
--[[Ranlux64_4 メソッド>#Ranlux64_4-Ranlux64_4]]~
--[[random メソッド>#Ranlux64_4-random]]~
--[[seed メソッド>#Ranlux64_4-seed]]~
--[[randomize メソッド>#Ranlux64_4-randomize]]~
--[[serialize メソッド>#Ranlux64_4-serialize]]~
--[[deserialize メソッド>#Ranlux64_4-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux64_4-min]]~
--[[max プロパティ>#Ranlux64_4-max]]~

--------------------------------------------------------------------------------
-Ranlux64_4.Ranlux64_4 メソッド &aname(Ranlux64_4-Ranlux64_4);~
 コンストラクタ。
--シグネチャ:~
---Ranlux64_4()~
---Ranlux64_4(seed)~
---Ranlux64_4(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux64_4.random メソッド &aname(Ranlux64_4-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux64_4.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux64_4.seed メソッド &aname(Ranlux64_4-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux64_4.seed()~
---Ranlux64_4.seed(seed)~
---Ranlux64_4.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_4.randomize メソッド &aname(Ranlux64_4-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux64_4.randomize()~
---Ranlux64_4.randomize(seed)~
---Ranlux64_4.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux64_4.seed メソッド>#Ranlux64_4-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux64_4.serialize メソッド &aname(Ranlux64_4-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux64_4.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux64_4.deserialize メソッド &aname(Ranlux64_4-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux64_4.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_4.min プロパティ &aname(Ranlux64_4-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux64_4.max プロパティ &aname(Ranlux64_4-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux3_01 クラス [#Ranlux3_01]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 32bit 浮動小数点数．
-メソッド:~
--[[Ranlux3_01 メソッド>#Ranlux3_01-Ranlux3_01]]~
--[[random メソッド>#Ranlux3_01-random]]~
--[[seed メソッド>#Ranlux3_01-seed]]~
--[[randomize メソッド>#Ranlux3_01-randomize]]~
--[[serialize メソッド>#Ranlux3_01-serialize]]~
--[[deserialize メソッド>#Ranlux3_01-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux3_01-min]]~
--[[max プロパティ>#Ranlux3_01-max]]~

--------------------------------------------------------------------------------
-Ranlux3_01.Ranlux3_01 メソッド &aname(Ranlux3_01-Ranlux3_01);~
 コンストラクタ。
--シグネチャ:~
---Ranlux3_01()~
---Ranlux3_01(seed)~
---Ranlux3_01(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux3_01.random メソッド &aname(Ranlux3_01-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux3_01.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux3_01.seed メソッド &aname(Ranlux3_01-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux3_01.seed()~
---Ranlux3_01.seed(seed)~
---Ranlux3_01.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux3_01.randomize メソッド &aname(Ranlux3_01-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux3_01.randomize()~
---Ranlux3_01.randomize(seed)~
---Ranlux3_01.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux3_01.seed メソッド>#Ranlux3_01-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux3_01.serialize メソッド &aname(Ranlux3_01-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux3_01.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux3_01.deserialize メソッド &aname(Ranlux3_01-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux3_01.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux3_01.min プロパティ &aname(Ranlux3_01-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux3_01.max プロパティ &aname(Ranlux3_01-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux4_01 クラス [#Ranlux4_01]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 32bit 浮動小数点数．
-メソッド:~
--[[Ranlux4_01 メソッド>#Ranlux4_01-Ranlux4_01]]~
--[[random メソッド>#Ranlux4_01-random]]~
--[[seed メソッド>#Ranlux4_01-seed]]~
--[[randomize メソッド>#Ranlux4_01-randomize]]~
--[[serialize メソッド>#Ranlux4_01-serialize]]~
--[[deserialize メソッド>#Ranlux4_01-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux4_01-min]]~
--[[max プロパティ>#Ranlux4_01-max]]~

--------------------------------------------------------------------------------
-Ranlux4_01.Ranlux4_01 メソッド &aname(Ranlux4_01-Ranlux4_01);~
 コンストラクタ。
--シグネチャ:~
---Ranlux4_01()~
---Ranlux4_01(seed)~
---Ranlux4_01(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux4_01.random メソッド &aname(Ranlux4_01-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux4_01.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux4_01.seed メソッド &aname(Ranlux4_01-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux4_01.seed()~
---Ranlux4_01.seed(seed)~
---Ranlux4_01.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux4_01.randomize メソッド &aname(Ranlux4_01-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux4_01.randomize()~
---Ranlux4_01.randomize(seed)~
---Ranlux4_01.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux4_01.seed メソッド>#Ranlux4_01-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux4_01.serialize メソッド &aname(Ranlux4_01-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux4_01.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux4_01.deserialize メソッド &aname(Ranlux4_01-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux4_01.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux4_01.min プロパティ &aname(Ranlux4_01-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux4_01.max プロパティ &aname(Ranlux4_01-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux64_3_01 クラス [#Ranlux64_3_01]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[Ranlux64_3_01 メソッド>#Ranlux64_3_01-Ranlux64_3_01]]~
--[[random メソッド>#Ranlux64_3_01-random]]~
--[[seed メソッド>#Ranlux64_3_01-seed]]~
--[[randomize メソッド>#Ranlux64_3_01-randomize]]~
--[[serialize メソッド>#Ranlux64_3_01-serialize]]~
--[[deserialize メソッド>#Ranlux64_3_01-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux64_3_01-min]]~
--[[max プロパティ>#Ranlux64_3_01-max]]~

--------------------------------------------------------------------------------
-Ranlux64_3_01.Ranlux64_3_01 メソッド &aname(Ranlux64_3_01-Ranlux64_3_01);~
 コンストラクタ。
--シグネチャ:~
---Ranlux64_3_01()~
---Ranlux64_3_01(seed)~
---Ranlux64_3_01(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux64_3_01.random メソッド &aname(Ranlux64_3_01-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux64_3_01.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux64_3_01.seed メソッド &aname(Ranlux64_3_01-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux64_3_01.seed()~
---Ranlux64_3_01.seed(seed)~
---Ranlux64_3_01.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_3_01.randomize メソッド &aname(Ranlux64_3_01-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux64_3_01.randomize()~
---Ranlux64_3_01.randomize(seed)~
---Ranlux64_3_01.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux64_3_01.seed メソッド>#Ranlux64_3_01-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux64_3_01.serialize メソッド &aname(Ranlux64_3_01-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux64_3_01.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux64_3_01.deserialize メソッド &aname(Ranlux64_3_01-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux64_3_01.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_3_01.min プロパティ &aname(Ranlux64_3_01-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux64_3_01.max プロパティ &aname(Ranlux64_3_01-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**Ranlux64_4_01 クラス [#Ranlux64_4_01]
 Luxury Random Numbers アルゴリズムの疑似乱数生成エンジンクラス。
 周期 ~10^171 ，精度 64bit 浮動小数点数．
-メソッド:~
--[[Ranlux64_4_01 メソッド>#Ranlux64_4_01-Ranlux64_4_01]]~
--[[random メソッド>#Ranlux64_4_01-random]]~
--[[seed メソッド>#Ranlux64_4_01-seed]]~
--[[randomize メソッド>#Ranlux64_4_01-randomize]]~
--[[serialize メソッド>#Ranlux64_4_01-serialize]]~
--[[deserialize メソッド>#Ranlux64_4_01-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Ranlux64_4_01-min]]~
--[[max プロパティ>#Ranlux64_4_01-max]]~

--------------------------------------------------------------------------------
-Ranlux64_4_01.Ranlux64_4_01 メソッド &aname(Ranlux64_4_01-Ranlux64_4_01);~
 コンストラクタ。
--シグネチャ:~
---Ranlux64_4_01()~
---Ranlux64_4_01(seed)~
---Ranlux64_4_01(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~

--------------------------------------------------------------------------------
-Ranlux64_4_01.random メソッド &aname(Ranlux64_4_01-random);~
 乱数値を生成する。
--シグネチャ:~
---Ranlux64_4_01.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-Ranlux64_4_01.seed メソッド &aname(Ranlux64_4_01-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---Ranlux64_4_01.seed()~
---Ranlux64_4_01.seed(seed)~
---Ranlux64_4_01.seed(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_4_01.randomize メソッド &aname(Ranlux64_4_01-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---Ranlux64_4_01.randomize()~
---Ranlux64_4_01.randomize(seed)~
---Ranlux64_4_01.randomize(seeds*)~
--引数:~
---seed~
乱数種。~
---seeds~
複数の乱数種。~
--返値:~
---(なし)~
--注記:~
[[Ranlux64_4_01.seed メソッド>#Ranlux64_4_01-seed]] を参照。~

--------------------------------------------------------------------------------
-Ranlux64_4_01.serialize メソッド &aname(Ranlux64_4_01-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---Ranlux64_4_01.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
シリアライズ文字列。~

--------------------------------------------------------------------------------
-Ranlux64_4_01.deserialize メソッド &aname(Ranlux64_4_01-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---Ranlux64_4_01.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Ranlux64_4_01.min プロパティ &aname(Ranlux64_4_01-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Ranlux64_4_01.max プロパティ &aname(Ranlux64_4_01-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**RandomDevice クラス [#RandomDevice]
 外部デバイスを入力にとる非決定論的乱数生成エンジンクラス。
 精度 32bit 符号無し整数．
-メソッド:~
--[[RandomDevice メソッド>#RandomDevice-RandomDevice]]~
-スタティックメソッド:~
--[[random メソッド>#RandomDevice-random]]~
--[[seed メソッド>#RandomDevice-seed]]~
--[[randomize メソッド>#RandomDevice-randomize]]~
--[[serialize メソッド>#RandomDevice-serialize]]~
--[[deserialize メソッド>#RandomDevice-deserialize]]~
-スタティックプロパティ:~
--[[min プロパティ>#RandomDevice-min]]~
--[[max プロパティ>#RandomDevice-max]]~

--------------------------------------------------------------------------------
-RandomDevice.RandomDevice メソッド &aname(RandomDevice-RandomDevice);~
 コンストラクタ。
--シグネチャ:~
---RandomDevice()~
--引数:~
---(なし)~

--------------------------------------------------------------------------------
-RandomDevice.random メソッド &aname(RandomDevice-random);~
 乱数値を生成する。
--シグネチャ:~
---RandomDevice.random()~
--引数:~
---(なし)~
--返値:~
---Variant~
生成された乱数値。~

--------------------------------------------------------------------------------
-RandomDevice.seed メソッド &aname(RandomDevice-seed);~
 エンジンを乱数種で初期化する。
--シグネチャ:~
---RandomDevice.seed()~
--引数:~
---(なし)~
--返値:~
---(なし)~
--注記:~
このメソッドは他の疑似乱数生成エンジンクラスとのインタフェース統一のために用意されており、実際には何も作用しない。~

--------------------------------------------------------------------------------
-RandomDevice.randomize メソッド &aname(RandomDevice-randomize);~
 seed メソッドに同じ。
--シグネチャ:~
---RandomDevice.randomize()~
--引数:~
---(なし)~
--返値:~
---(なし)~
--注記:~
[[RandomDevice.seed メソッド>#RandomDevice-seed]] を参照。~

--------------------------------------------------------------------------------
-RandomDevice.serialize メソッド &aname(RandomDevice-serialize);~
 このエンジンの状態を文字列として書き出す。
--シグネチャ:~
---RandomDevice.serialize()~
--引数:~
---(なし)~
--返値:~
---String~
--注記:~
このメソッドは他の疑似乱数生成エンジンクラスとのインタフェース統一のために用意されており、実際には何も作用しない。~

--------------------------------------------------------------------------------
-RandomDevice.deserialize メソッド &aname(RandomDevice-deserialize);~
 このエンジンの状態を文字列から復元する。
--シグネチャ:~
---RandomDevice.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~
--注記:~
このメソッドは他の疑似乱数生成エンジンクラスとのインタフェース統一のために用意されており、実際には何も作用しない。~

--------------------------------------------------------------------------------
-RandomDevice.min プロパティ &aname(RandomDevice-min);~
 このエンジンが生成する乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-RandomDevice.max プロパティ &aname(RandomDevice-max);~
 このエンジンが生成する乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**UniformSmallint クラス [#UniformSmallint]
 狭い範囲の整数の一様分布を返す確率分布クラス。
 精度 64bit 符号付き整数．
-メソッド:~
--[[UniformSmallint メソッド>#UniformSmallint-UniformSmallint]]~
-メソッド:~
--[[random メソッド>#UniformSmallint-random]]~
--[[reset メソッド>#UniformSmallint-reset]]~
--[[serialize メソッド>#UniformSmallint-serialize]]~
--[[deserialize メソッド>#UniformSmallint-deserialize]]~
-プロパティ:~
--[[min プロパティ>#UniformSmallint-min]]~
--[[max プロパティ>#UniformSmallint-max]]~

--------------------------------------------------------------------------------
-UniformSmallint.UniformSmallint メソッド &aname(UniformSmallint-UniformSmallint);~
 コンストラクタ。
--シグネチャ:~
---UniformSmallint(min = 0, max = 9)~
--引数:~
---min~
最小値。~
---max~
最大値。~

--------------------------------------------------------------------------------
-UniformSmallint.random メソッド &aname(UniformSmallint-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---UniformSmallint.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-UniformSmallint.reset メソッド &aname(UniformSmallint-reset);~
 状態を初期化する。
--シグネチャ:~
---UniformSmallint.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-UniformSmallint.serialize メソッド &aname(UniformSmallint-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---UniformSmallint.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-UniformSmallint.deserialize メソッド &aname(UniformSmallint-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---UniformSmallint.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-UniformSmallint.min プロパティ &aname(UniformSmallint-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-UniformSmallint.max プロパティ &aname(UniformSmallint-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**UniformIntDistribution クラス [#UniformIntDistribution]
 整数の一様分布を返す確率分布クラス。
 精度 64bit 符号付き整数．
-メソッド:~
--[[UniformIntDistribution メソッド>#UniformIntD-UniformIntD]]~
-メソッド:~
--[[random メソッド>#UniformIntD-random]]~
--[[reset メソッド>#UniformIntD-reset]]~
--[[serialize メソッド>#UniformIntD-serialize]]~
--[[deserialize メソッド>#UniformIntD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#UniformIntD-min]]~
--[[max プロパティ>#UniformIntD-max]]~

--------------------------------------------------------------------------------
-UniformIntDistribution.UniformIntDistribution メソッド &aname(UniformIntD-UniformIntD);~
 コンストラクタ。
--シグネチャ:~
---UniformIntDistribution(min = 0, max = 9)~
--引数:~
---min~
最小値。~
---max~
最大値。~

--------------------------------------------------------------------------------
-UniformIntDistribution.random メソッド &aname(UniformIntD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---UniformIntDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-UniformIntDistribution.reset メソッド &aname(UniformIntD-reset);~
 状態を初期化する。
--シグネチャ:~
---UniformIntDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-UniformIntDistribution.serialize メソッド &aname(UniformIntD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---UniformIntDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-UniformIntDistribution.deserialize メソッド &aname(UniformIntD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---UniformIntDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-UniformIntDistribution.min プロパティ &aname(UniformIntD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-UniformIntDistribution.max プロパティ &aname(UniformIntD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**UniformInt クラス [#UniformInt]
 UniformIntDistribution クラスに同じ。

--------------------------------------------------------------------------------

**Uniform01 クラス [#Uniform01]
 [0..1) 範囲の実数の一様分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[Uniform01 メソッド>#Uniform01-Uniform01]]~
-メソッド:~
--[[random メソッド>#Uniform01-random]]~
--[[reset メソッド>#Uniform01-reset]]~
--[[serialize メソッド>#Uniform01-serialize]]~
--[[deserialize メソッド>#Uniform01-deserialize]]~
-プロパティ:~
--[[min プロパティ>#Uniform01-min]]~
--[[max プロパティ>#Uniform01-max]]~

--------------------------------------------------------------------------------
-Uniform01.Uniform01 メソッド &aname(Uniform01-Uniform01);~
 コンストラクタ。
--シグネチャ:~
---Uniform01()~
--引数:~
---(なし)~

--------------------------------------------------------------------------------
-Uniform01.random メソッド &aname(Uniform01-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---Uniform01.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-Uniform01.reset メソッド &aname(Uniform01-reset);~
 状態を初期化する。
--シグネチャ:~
---Uniform01.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-Uniform01.serialize メソッド &aname(Uniform01-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---Uniform01.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-Uniform01.deserialize メソッド &aname(Uniform01-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---Uniform01.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-Uniform01.min プロパティ &aname(Uniform01-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-Uniform01.max プロパティ &aname(Uniform01-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**UniformRealDistribution クラス [#UniformRealDistribution]
 実数の一様分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[UniformRealDistribution メソッド>#UniformRealD-UniformRealD]]~
-メソッド:~
--[[random メソッド>#UniformRealD-random]]~
--[[reset メソッド>#UniformRealD-reset]]~
--[[serialize メソッド>#UniformRealD-serialize]]~
--[[deserialize メソッド>#UniformRealD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#UniformRealD-min]]~
--[[max プロパティ>#UniformRealD-max]]~

--------------------------------------------------------------------------------
-UniformRealDistribution.UniformRealDistribution メソッド &aname(UniformRealD-UniformRealD);~
 コンストラクタ。
--シグネチャ:~
---UniformRealDistribution(min = 0, max = 9)~
--引数:~
---min~
最小値。~
---max~
最大値。~

--------------------------------------------------------------------------------
-UniformRealDistribution.random メソッド &aname(UniformRealD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---UniformRealDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-UniformRealDistribution.reset メソッド &aname(UniformRealD-reset);~
 状態を初期化する。
--シグネチャ:~
---UniformRealDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-UniformRealDistribution.serialize メソッド &aname(UniformRealD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---UniformRealDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-UniformRealDistribution.deserialize メソッド &aname(UniformRealD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---UniformRealDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-UniformRealDistribution.min プロパティ &aname(UniformRealD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-UniformRealDistribution.max プロパティ &aname(UniformRealD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**UniformReal クラス [#UniformReal]
 UniformRealDistribution クラスに同じ。

--------------------------------------------------------------------------------

**BernoulliDistribution クラス [#BernoulliDistribution]
 ベルヌーイ分布を返す確率分布クラス。
 精度 真理値．
-メソッド:~
--[[BernoulliDistribution メソッド>#BernoulliD-BernoulliD]]~
-メソッド:~
--[[random メソッド>#BernoulliD-random]]~
--[[reset メソッド>#BernoulliD-reset]]~
--[[serialize メソッド>#BernoulliD-serialize]]~
--[[deserialize メソッド>#BernoulliD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#BernoulliD-min]]~
--[[max プロパティ>#BernoulliD-max]]~

--------------------------------------------------------------------------------
-BernoulliDistribution.BernoulliDistribution メソッド &aname(BernoulliD-BernoulliD);~
 コンストラクタ。
--シグネチャ:~
---BernoulliDistribution(p = 0.5)~
--引数:~
---p~
成功確率。(0 <= p <= 1)~

--------------------------------------------------------------------------------
-BernoulliDistribution.random メソッド &aname(BernoulliD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---BernoulliDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Boolean~
生成された乱数値。~

--------------------------------------------------------------------------------
-BernoulliDistribution.reset メソッド &aname(BernoulliD-reset);~
 状態を初期化する。
--シグネチャ:~
---BernoulliDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-BernoulliDistribution.serialize メソッド &aname(BernoulliD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---BernoulliDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-BernoulliDistribution.deserialize メソッド &aname(BernoulliD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---BernoulliDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-BernoulliDistribution.min プロパティ &aname(BernoulliD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-BernoulliDistribution.max プロパティ &aname(BernoulliD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**BinomialDistribution クラス [#BinomialDistribution]
 二項分布を返す確率分布クラス。
 精度 32bit 符号付き整数．
-メソッド:~
--[[BinomialDistribution メソッド>#BinomialD-BinomialD]]~
-メソッド:~
--[[random メソッド>#BinomialD-random]]~
--[[reset メソッド>#BinomialD-reset]]~
--[[serialize メソッド>#BinomialD-serialize]]~
--[[deserialize メソッド>#BinomialD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#BinomialD-min]]~
--[[max プロパティ>#BinomialD-max]]~

--------------------------------------------------------------------------------
-BinomialDistribution.BinomialDistribution メソッド &aname(BinomialD-BinomialD);~
 コンストラクタ。
--シグネチャ:~
---BinomialDistribution(t = 1, p = 0.5)~
--引数:~
---t~
試行回数。(t >= 0)~
---p~
成功確率。(0 <= p <= 1)~

--------------------------------------------------------------------------------
-BinomialDistribution.random メソッド &aname(BinomialD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---BinomialDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-BinomialDistribution.reset メソッド &aname(BinomialD-reset);~
 状態を初期化する。
--シグネチャ:~
---BinomialDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-BinomialDistribution.serialize メソッド &aname(BinomialD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---BinomialDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-BinomialDistribution.deserialize メソッド &aname(BinomialD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---BinomialDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-BinomialDistribution.min プロパティ &aname(BinomialD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-BinomialDistribution.max プロパティ &aname(BinomialD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**GeometricDistribution クラス [#GeometricDistribution]
 幾何分布を返す確率分布クラス。
 精度 64bit 符号付き整数．
-メソッド:~
--[[GeometricDistribution メソッド>#GeometricD-GeometricD]]~
-メソッド:~
--[[random メソッド>#GeometricD-random]]~
--[[reset メソッド>#GeometricD-reset]]~
--[[serialize メソッド>#GeometricD-serialize]]~
--[[deserialize メソッド>#GeometricD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#GeometricD-min]]~
--[[max プロパティ>#GeometricD-max]]~

--------------------------------------------------------------------------------
-GeometricDistribution.GeometricDistribution メソッド &aname(GeometricD-GeometricD);~
 コンストラクタ。
--シグネチャ:~
---GeometricDistribution(p = 0.5)~
--引数:~
---p~
パラメータ。(0 < p < 1)~

--------------------------------------------------------------------------------
-GeometricDistribution.random メソッド &aname(GeometricD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---GeometricDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-GeometricDistribution.reset メソッド &aname(GeometricD-reset);~
 状態を初期化する。
--シグネチャ:~
---GeometricDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-GeometricDistribution.serialize メソッド &aname(GeometricD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---GeometricDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-GeometricDistribution.deserialize メソッド &aname(GeometricD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---GeometricDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-GeometricDistribution.min プロパティ &aname(GeometricD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-GeometricDistribution.max プロパティ &aname(GeometricD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**NegativeBinomialDistribution クラス [#NegativeBinomialDistribution]
 負の二項分布を返す確率分布クラス。
 精度 64bit 符号付き整数．
-メソッド:~
--[[NegativeBinomialDistribution メソッド>#NBinomialD-NBinomialD]]~
-メソッド:~
--[[random メソッド>#NBinomialD-random]]~
--[[reset メソッド>#NBinomialD-reset]]~
--[[serialize メソッド>#NBinomialD-serialize]]~
--[[deserialize メソッド>#NBinomialD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#NBinomialD-min]]~
--[[max プロパティ>#NBinomialD-max]]~

--------------------------------------------------------------------------------
-NBinomialDistribution.NegativeBinomialDistribution メソッド &aname(NBinomialD-NBinomialD);~
 コンストラクタ。
--シグネチャ:~
---NBinomialDistribution(k = 1, p = 0.5)~
--引数:~
---k~
試行回数。(k >= 0)~
---p~
成功確率。(0 <= p <= 1)~

--------------------------------------------------------------------------------
-NBinomialDistribution.random メソッド &aname(NBinomialD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---NBinomialDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-NBinomialDistribution.reset メソッド &aname(NBinomialD-reset);~
 状態を初期化する。
--シグネチャ:~
---NBinomialDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-NBinomialDistribution.serialize メソッド &aname(NBinomialD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---NBinomialDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-NBinomialDistribution.deserialize メソッド &aname(NBinomialD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---NBinomialDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-NBinomialDistribution.min プロパティ &aname(NBinomialD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-NBinomialDistribution.max プロパティ &aname(NBinomialD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**PoissonDistribution クラス [#PoissonDistribution]
 ポアソン分布を返す確率分布クラス。
 精度 64bit 符号付き整数．
-メソッド:~
--[[PoissonDistribution メソッド>#PoissonD-PoissonD]]~
-メソッド:~
--[[random メソッド>#PoissonD-random]]~
--[[reset メソッド>#PoissonD-reset]]~
--[[serialize メソッド>#PoissonD-serialize]]~
--[[deserialize メソッド>#PoissonD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#PoissonD-min]]~
--[[max プロパティ>#PoissonD-max]]~

--------------------------------------------------------------------------------
-PoissonDistribution.PoissonDistribution メソッド &aname(PoissonD-PoissonD);~
 コンストラクタ。
--シグネチャ:~
---PoissonDistribution(mean = 1)~
--引数:~
---mean~
パラメータ。(mean > 0)~

--------------------------------------------------------------------------------
-PoissonDistribution.random メソッド &aname(PoissonD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---PoissonDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-PoissonDistribution.reset メソッド &aname(PoissonD-reset);~
 状態を初期化する。
--シグネチャ:~
---PoissonDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-PoissonDistribution.serialize メソッド &aname(PoissonD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---PoissonDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-PoissonDistribution.deserialize メソッド &aname(PoissonD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---PoissonDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-PoissonDistribution.min プロパティ &aname(PoissonD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-PoissonDistribution.max プロパティ &aname(PoissonD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**ExponentialDistribution クラス [#ExponentialDistribution]
 指数分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[ExponentialDistribution メソッド>#ExponentialD-ExponentialD]]~
-メソッド:~
--[[random メソッド>#ExponentialD-random]]~
--[[reset メソッド>#ExponentialD-reset]]~
--[[serialize メソッド>#ExponentialD-serialize]]~
--[[deserialize メソッド>#ExponentialD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#ExponentialD-min]]~
--[[max プロパティ>#ExponentialD-max]]~

--------------------------------------------------------------------------------
-ExponentialDistribution.ExponentialDistribution メソッド &aname(ExponentialD-ExponentialD);~
 コンストラクタ。
--シグネチャ:~
---ExponentialDistribution(lambda = 1)~
--引数:~
---lambda~
パラメータ。(lambda > 0)~

--------------------------------------------------------------------------------
-ExponentialDistribution.random メソッド &aname(ExponentialD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---ExponentialDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-ExponentialDistribution.reset メソッド &aname(ExponentialD-reset);~
 状態を初期化する。
--シグネチャ:~
---ExponentialDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-ExponentialDistribution.serialize メソッド &aname(ExponentialD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---ExponentialDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-ExponentialDistribution.deserialize メソッド &aname(ExponentialD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---ExponentialDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-ExponentialDistribution.min プロパティ &aname(ExponentialD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-ExponentialDistribution.max プロパティ &aname(ExponentialD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**GammaDistribution クラス [#GammaDistribution]
 ガンマ分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[GammaDistribution メソッド>#GammaD-GammaD]]~
-メソッド:~
--[[random メソッド>#GammaD-random]]~
--[[reset メソッド>#GammaD-reset]]~
--[[serialize メソッド>#GammaD-serialize]]~
--[[deserialize メソッド>#GammaD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#GammaD-min]]~
--[[max プロパティ>#GammaD-max]]~

--------------------------------------------------------------------------------
-GammaDistribution.GammaDistribution メソッド &aname(GammaD-GammaD);~
 コンストラクタ。
--シグネチャ:~
---GammaDistribution(alpha = 1, beta = 1)~
--引数:~
---alpha~
形状母数。(alpha > 0)~
---beta~
尺度母数。(beta > 0)~

--------------------------------------------------------------------------------
-GammaDistribution.random メソッド &aname(GammaD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---GammaDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-GammaDistribution.reset メソッド &aname(GammaD-reset);~
 状態を初期化する。
--シグネチャ:~
---GammaDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-GammaDistribution.serialize メソッド &aname(GammaD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---GammaDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-GammaDistribution.deserialize メソッド &aname(GammaD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---GammaDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-GammaDistribution.min プロパティ &aname(GammaD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-GammaDistribution.max プロパティ &aname(GammaD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**WeibullDistribution クラス [#WeibullDistribution]
 ワイブル分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[WeibullDistribution メソッド>#WeibullD-WeibullD]]~
-メソッド:~
--[[random メソッド>#WeibullD-random]]~
--[[reset メソッド>#WeibullD-reset]]~
--[[serialize メソッド>#WeibullD-serialize]]~
--[[deserialize メソッド>#WeibullD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#WeibullD-min]]~
--[[max プロパティ>#WeibullD-max]]~

--------------------------------------------------------------------------------
-WeibullDistribution.WeibullDistribution メソッド &aname(WeibullD-WeibullD);~
 コンストラクタ。
--シグネチャ:~
---WeibullDistribution(a = 1, b = 1)~
--引数:~
---a~
ワイブル係数（形状パラメータ）。(a > 0)~
---b~
尺度パラメータ。(b > 0)~

--------------------------------------------------------------------------------
-WeibullDistribution.random メソッド &aname(WeibullD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---WeibullDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-WeibullDistribution.reset メソッド &aname(WeibullD-reset);~
 状態を初期化する。
--シグネチャ:~
---WeibullDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-WeibullDistribution.serialize メソッド &aname(WeibullD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---WeibullDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-WeibullDistribution.deserialize メソッド &aname(WeibullD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---WeibullDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-WeibullDistribution.min プロパティ &aname(WeibullD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-WeibullDistribution.max プロパティ &aname(WeibullD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**ExtremeValueDistribution クラス [#ExtremeValueDistribution]
 極値分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[ExtremeValueDistribution メソッド>#ExtremeValueD-ExtremeValueD]]~
-メソッド:~
--[[random メソッド>#ExtremeValueD-random]]~
--[[reset メソッド>#ExtremeValueD-reset]]~
--[[serialize メソッド>#ExtremeValueD-serialize]]~
--[[deserialize メソッド>#ExtremeValueD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#ExtremeValueD-min]]~
--[[max プロパティ>#ExtremeValueD-max]]~

--------------------------------------------------------------------------------
-ExtremeValueDistribution.ExtremeValueDistribution メソッド &aname(ExtremeValueD-ExtremeValueD);~
 コンストラクタ。
--シグネチャ:~
---ExtremeValueDistribution(a = 1, b = 1)~
--引数:~
---a~
位置パラメータ。~
---b~
スケールパラメータ。(b > 0)~

--------------------------------------------------------------------------------
-ExtremeValueDistribution.random メソッド &aname(ExtremeValueD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---ExtremeValueDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-ExtremeValueDistribution.reset メソッド &aname(ExtremeValueD-reset);~
 状態を初期化する。
--シグネチャ:~
---ExtremeValueDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-ExtremeValueDistribution.serialize メソッド &aname(ExtremeValueD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---ExtremeValueDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-ExtremeValueDistribution.deserialize メソッド &aname(ExtremeValueD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---ExtremeValueDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-ExtremeValueDistribution.min プロパティ &aname(ExtremeValueD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-ExtremeValueDistribution.max プロパティ &aname(ExtremeValueD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**BetaDistribution クラス [#BetaDistribution]
 ベータ分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[BetaDistribution メソッド>#BetaD-BetaD]]~
-メソッド:~
--[[random メソッド>#BetaD-random]]~
--[[reset メソッド>#BetaD-reset]]~
--[[serialize メソッド>#BetaD-serialize]]~
--[[deserialize メソッド>#BetaD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#BetaD-min]]~
--[[max プロパティ>#BetaD-max]]~

--------------------------------------------------------------------------------
-BetaDistribution.BetaDistribution メソッド &aname(BetaD-BetaD);~
 コンストラクタ。
--シグネチャ:~
---BetaDistribution(alpha = 1, beta = 1)~
--引数:~
---alpha~
パラメータα。(alpha > 0)~
---beta~
パラメータβ。(beta > 0)~

--------------------------------------------------------------------------------
-BetaDistribution.random メソッド &aname(BetaD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---BetaDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-BetaDistribution.reset メソッド &aname(BetaD-reset);~
 状態を初期化する。
--シグネチャ:~
---BetaDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-BetaDistribution.serialize メソッド &aname(BetaD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---BetaDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-BetaDistribution.deserialize メソッド &aname(BetaD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---BetaDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-BetaDistribution.min プロパティ &aname(BetaD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-BetaDistribution.max プロパティ &aname(BetaD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LaplaceDistribution クラス [#LaplaceDistribution]
 ラプラス分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[LaplaceDistribution メソッド>#LaplaceD-LaplaceD]]~
-メソッド:~
--[[random メソッド>#LaplaceD-random]]~
--[[reset メソッド>#LaplaceD-reset]]~
--[[serialize メソッド>#LaplaceD-serialize]]~
--[[deserialize メソッド>#LaplaceD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LaplaceD-min]]~
--[[max プロパティ>#LaplaceD-max]]~

--------------------------------------------------------------------------------
-LaplaceDistribution.LaplaceDistribution メソッド &aname(LaplaceD-LaplaceD);~
 コンストラクタ。
--シグネチャ:~
---LaplaceDistribution(mean = 0, beta = 1)~
--引数:~
---mean~
平均。~
---beta~
パラメータβ。~

--------------------------------------------------------------------------------
-LaplaceDistribution.random メソッド &aname(LaplaceD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---LaplaceDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-LaplaceDistribution.reset メソッド &aname(LaplaceD-reset);~
 状態を初期化する。
--シグネチャ:~
---LaplaceDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LaplaceDistribution.serialize メソッド &aname(LaplaceD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---LaplaceDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-LaplaceDistribution.deserialize メソッド &aname(LaplaceD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---LaplaceDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-LaplaceDistribution.min プロパティ &aname(LaplaceD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LaplaceDistribution.max プロパティ &aname(LaplaceD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**NormalDistribution クラス [#NormalDistribution]
 正規分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[NormalDistribution メソッド>#NormalD-NormalD]]~
-メソッド:~
--[[random メソッド>#NormalD-random]]~
--[[reset メソッド>#NormalD-reset]]~
--[[serialize メソッド>#NormalD-serialize]]~
--[[deserialize メソッド>#NormalD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#NormalD-min]]~
--[[max プロパティ>#NormalD-max]]~

--------------------------------------------------------------------------------
-NormalDistribution.NormalDistribution メソッド &aname(NormalD-NormalD);~
 コンストラクタ。
--シグネチャ:~
---NormalDistribution(mean = 0, sigma = 1)~
--引数:~
---mean~
平均。~
---sigma~
分散。(sigma >= 0)~

--------------------------------------------------------------------------------
-NormalDistribution.random メソッド &aname(NormalD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---NormalDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-NormalDistribution.reset メソッド &aname(NormalD-reset);~
 状態を初期化する。
--シグネチャ:~
---NormalDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-NormalDistribution.serialize メソッド &aname(NormalD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---NormalDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-NormalDistribution.deserialize メソッド &aname(NormalD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---NormalDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-NormalDistribution.min プロパティ &aname(NormalD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-NormalDistribution.max プロパティ &aname(NormalD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**LognormalDistribution クラス [#LognormalDistribution]
 対数正規分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[LognormalDistribution メソッド>#LognormalD-LognormalD]]~
-メソッド:~
--[[random メソッド>#LognormalD-random]]~
--[[reset メソッド>#LognormalD-reset]]~
--[[serialize メソッド>#LognormalD-serialize]]~
--[[deserialize メソッド>#LognormalD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#LognormalD-min]]~
--[[max プロパティ>#LognormalD-max]]~

--------------------------------------------------------------------------------
-LognormalDistribution.LognormalDistribution メソッド &aname(LognormalD-LognormalD);~
 コンストラクタ。
--シグネチャ:~
---LognormalDistribution(mean = 1, sigma = 1)~
--引数:~
---mean~
平均。~
---sigma~
分散。(sigma >= 0)~

--------------------------------------------------------------------------------
-LognormalDistribution.random メソッド &aname(LognormalD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---LognormalDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-LognormalDistribution.reset メソッド &aname(LognormalD-reset);~
 状態を初期化する。
--シグネチャ:~
---LognormalDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-LognormalDistribution.serialize メソッド &aname(LognormalD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---LognormalDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-LognormalDistribution.deserialize メソッド &aname(LognormalD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---LognormalDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-LognormalDistribution.min プロパティ &aname(LognormalD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-LognormalDistribution.max プロパティ &aname(LognormalD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**ChiSquaredDistribution クラス [#ChiSquaredDistribution]
 カイ二乗分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[ChiSquaredDistribution メソッド>#ChiSquaredD-ChiSquaredD]]~
-メソッド:~
--[[random メソッド>#ChiSquaredD-random]]~
--[[reset メソッド>#ChiSquaredD-reset]]~
--[[serialize メソッド>#ChiSquaredD-serialize]]~
--[[deserialize メソッド>#ChiSquaredD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#ChiSquaredD-min]]~
--[[max プロパティ>#ChiSquaredD-max]]~

--------------------------------------------------------------------------------
-ChiSquaredDistribution.ChiSquaredDistribution メソッド &aname(ChiSquaredD-ChiSquaredD);~
 コンストラクタ。
--シグネチャ:~
---ChiSquaredDistribution(n = 1)~
--引数:~
---n~
母数。~

--------------------------------------------------------------------------------
-ChiSquaredDistribution.random メソッド &aname(ChiSquaredD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---ChiSquaredDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-ChiSquaredDistribution.reset メソッド &aname(ChiSquaredD-reset);~
 状態を初期化する。
--シグネチャ:~
---ChiSquaredDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-ChiSquaredDistribution.serialize メソッド &aname(ChiSquaredD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---ChiSquaredDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-ChiSquaredDistribution.deserialize メソッド &aname(ChiSquaredD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---ChiSquaredDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-ChiSquaredDistribution.min プロパティ &aname(ChiSquaredD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-ChiSquaredDistribution.max プロパティ &aname(ChiSquaredD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**NonCentralChiSquaredDistribution クラス [#NonCentralChiSquaredDistribution]
 非心カイ二乗分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[NonCentralChiSquaredDistribution メソッド>#NCChiSquaredD-NCChiSquaredD]]~
-メソッド:~
--[[random メソッド>#NCChiSquaredD-random]]~
--[[reset メソッド>#NCChiSquaredD-reset]]~
--[[serialize メソッド>#NCChiSquaredD-serialize]]~
--[[deserialize メソッド>#NCChiSquaredD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#NCChiSquaredD-min]]~
--[[max プロパティ>#NCChiSquaredD-max]]~

--------------------------------------------------------------------------------
-NonCentralChiSquaredDistribution.NonCentralChiSquaredDistribution メソッド &aname(NCChiSquaredD-NCChiSquaredD);~
 コンストラクタ。
--シグネチャ:~
---NonCentralChiSquaredDistribution(k = 1, lambda = 1)~
--引数:~
---k~
自由度。(k > 0)~
---lambda~
非心度。(lambda > 0)~

--------------------------------------------------------------------------------
-NonCentralChiSquaredDistribution.random メソッド &aname(NCChiSquaredD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---NonCentralChiSquaredDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-NonCentralChiSquaredDistribution.reset メソッド &aname(NCChiSquaredD-reset);~
 状態を初期化する。
--シグネチャ:~
---NonCentralChiSquaredDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-NonCentralChiSquaredDistribution.serialize メソッド &aname(NCChiSquaredD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---NonCentralChiSquaredDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-NonCentralChiSquaredDistribution.deserialize メソッド &aname(NCChiSquaredD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---NonCentralChiSquaredDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-NonCentralChiSquaredDistribution.min プロパティ &aname(NCChiSquaredD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-NonCentralChiSquaredDistribution.max プロパティ &aname(NCChiSquaredD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**CauchyDistribution クラス [#CauchyDistribution]
 コーシー分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[CauchyDistribution メソッド>#CauchyD-CauchyD]]~
-メソッド:~
--[[random メソッド>#CauchyD-random]]~
--[[reset メソッド>#CauchyD-reset]]~
--[[serialize メソッド>#CauchyD-serialize]]~
--[[deserialize メソッド>#CauchyD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#CauchyD-min]]~
--[[max プロパティ>#CauchyD-max]]~

--------------------------------------------------------------------------------
-CauchyDistribution.CauchyDistribution メソッド &aname(CauchyD-CauchyD);~
 コンストラクタ。
--シグネチャ:~
---CauchyDistribution(median = 0, sigma = 1)~
--引数:~
---median~
最頻値を与える位置母数。~
---sigma~
半値半幅を与える尺度母数。~

--------------------------------------------------------------------------------
-CauchyDistribution.random メソッド &aname(CauchyD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---CauchyDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-CauchyDistribution.reset メソッド &aname(CauchyD-reset);~
 状態を初期化する。
--シグネチャ:~
---CauchyDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-CauchyDistribution.serialize メソッド &aname(CauchyD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---CauchyDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-CauchyDistribution.deserialize メソッド &aname(CauchyD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---CauchyDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-CauchyDistribution.min プロパティ &aname(CauchyD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-CauchyDistribution.max プロパティ &aname(CauchyD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**FisherFDistribution クラス [#FisherFDistribution]
 フィッシャーのF分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[FisherFDistribution メソッド>#FisherFD-FisherFD]]~
-メソッド:~
--[[random メソッド>#FisherFD-random]]~
--[[reset メソッド>#FisherFD-reset]]~
--[[serialize メソッド>#FisherFD-serialize]]~
--[[deserialize メソッド>#FisherFD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#FisherFD-min]]~
--[[max プロパティ>#FisherFD-max]]~

--------------------------------------------------------------------------------
-FisherFDistribution.FisherFDistribution メソッド &aname(FisherFD-FisherFD);~
 コンストラクタ。
--シグネチャ:~
---FisherFDistribution(m = 1, n = 1)~
--引数:~
---m~
自由度パラメータ。(m > 0)~
---n~
自由度パラメータ。(n > 0)~

--------------------------------------------------------------------------------
-FisherFDistribution.random メソッド &aname(FisherFD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---FisherFDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-FisherFDistribution.reset メソッド &aname(FisherFD-reset);~
 状態を初期化する。
--シグネチャ:~
---FisherFDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-FisherFDistribution.serialize メソッド &aname(FisherFD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---FisherFDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-FisherFDistribution.deserialize メソッド &aname(FisherFD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---FisherFDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-FisherFDistribution.min プロパティ &aname(FisherFD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-FisherFDistribution.max プロパティ &aname(FisherFD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**StudentTDistribution クラス [#StudentTDistribution]
 スチューデントのt分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[StudentTDistribution メソッド>#StudentTD-StudentTD]]~
-メソッド:~
--[[random メソッド>#StudentTD-random]]~
--[[reset メソッド>#StudentTD-reset]]~
--[[serialize メソッド>#StudentTD-serialize]]~
--[[deserialize メソッド>#StudentTD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#StudentTD-min]]~
--[[max プロパティ>#StudentTD-max]]~

--------------------------------------------------------------------------------
-StudentTDistribution.StudentTDistribution メソッド &aname(StudentTD-StudentTD);~
 コンストラクタ。
--シグネチャ:~
---StudentTDistribution(n = 1)~
--引数:~
---n~
自由度パラメータ。(n > 0)~

--------------------------------------------------------------------------------
-StudentTDistribution.random メソッド &aname(StudentTD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---StudentTDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-StudentTDistribution.reset メソッド &aname(StudentTD-reset);~
 状態を初期化する。
--シグネチャ:~
---StudentTDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-StudentTDistribution.serialize メソッド &aname(StudentTD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---StudentTDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-StudentTDistribution.deserialize メソッド &aname(StudentTD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---StudentTDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-StudentTDistribution.min プロパティ &aname(StudentTD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-StudentTDistribution.max プロパティ &aname(StudentTD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**DiscreteDistribution クラス [#DiscreteDistribution]
 離散的整数分布を返す確率分布クラス。
 精度 64bit 符号付き整数．
-メソッド:~
--[[DiscreteDistribution メソッド>#DiscreteD-DiscreteD]]~
-メソッド:~
--[[random メソッド>#DiscreteD-random]]~
--[[reset メソッド>#DiscreteD-reset]]~
--[[serialize メソッド>#DiscreteD-serialize]]~
--[[deserialize メソッド>#DiscreteD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#DiscreteD-min]]~
--[[max プロパティ>#DiscreteD-max]]~

--------------------------------------------------------------------------------
-DiscreteDistribution.DiscreteDistribution メソッド &aname(DiscreteD-DiscreteD);~
 コンストラクタ。
--シグネチャ:~
---DiscreteDistribution(weights*)~
--引数:~
---weights~
各値のウェイト。~

--------------------------------------------------------------------------------
-DiscreteDistribution.random メソッド &aname(DiscreteD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---DiscreteDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Integer~
生成された乱数値。~

--------------------------------------------------------------------------------
-DiscreteDistribution.reset メソッド &aname(DiscreteD-reset);~
 状態を初期化する。
--シグネチャ:~
---DiscreteDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-DiscreteDistribution.serialize メソッド &aname(DiscreteD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---DiscreteDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-DiscreteDistribution.deserialize メソッド &aname(DiscreteD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---DiscreteDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-DiscreteDistribution.min プロパティ &aname(DiscreteD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-DiscreteDistribution.max プロパティ &aname(DiscreteD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**PiecewiseConstantDistribution クラス [#PiecewiseConstantDistribution]
 一定区間分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[PiecewiseConstantDistribution メソッド>#PiecewiseConstantD-PiecewiseConstantD]]~
-メソッド:~
--[[random メソッド>#PiecewiseConstantD-random]]~
--[[reset メソッド>#PiecewiseConstantD-reset]]~
--[[serialize メソッド>#PiecewiseConstantD-serialize]]~
--[[deserialize メソッド>#PiecewiseConstantD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#PiecewiseConstantD-min]]~
--[[max プロパティ>#PiecewiseConstantD-max]]~

--------------------------------------------------------------------------------
-PiecewiseConstantDistribution.PiecewiseConstantDistribution メソッド &aname(PiecewiseConstantD-PiecewiseConstantD);~
 コンストラクタ。
--シグネチャ:~
---PiecewiseConstantDistribution(intervals_weights*)~
--引数:~
---intervals_weights~
区間および各区間のウェイト。(intervals_weights.count%2 == 1)~
intervals_weights の前半 intervals_weights.count/2+1 個の要素を区間とする。~
intervals_weights の後半 intervals_weights.count/2 個の要素を各区間のウェイトとする。~

--------------------------------------------------------------------------------
-PiecewiseConstantDistribution.random メソッド &aname(PiecewiseConstantD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---PiecewiseConstantDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-PiecewiseConstantDistribution.reset メソッド &aname(PiecewiseConstantD-reset);~
 状態を初期化する。
--シグネチャ:~
---PiecewiseConstantDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-PiecewiseConstantDistribution.serialize メソッド &aname(PiecewiseConstantD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---PiecewiseConstantDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-PiecewiseConstantDistribution.deserialize メソッド &aname(PiecewiseConstantD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---PiecewiseConstantDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-PiecewiseConstantDistribution.min プロパティ &aname(PiecewiseConstantD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-PiecewiseConstantDistribution.max プロパティ &aname(PiecewiseConstantD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**PiecewiseLinearDistribution クラス [#PiecewiseLinearDistribution]
 線形区間分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[PiecewiseLinearDistribution メソッド>#PiecewiseLinearD-PiecewiseLinearD]]~
-メソッド:~
--[[random メソッド>#PiecewiseLinearD-random]]~
--[[reset メソッド>#PiecewiseLinearD-reset]]~
--[[serialize メソッド>#PiecewiseLinearD-serialize]]~
--[[deserialize メソッド>#PiecewiseLinearD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#PiecewiseLinearD-min]]~
--[[max プロパティ>#PiecewiseLinearD-max]]~

--------------------------------------------------------------------------------
-PiecewiseLinearDistribution.PiecewiseLinearDistribution メソッド &aname(PiecewiseLinearD-PiecewiseLinearD);~
 コンストラクタ。
--シグネチャ:~
---PiecewiseLinearDistribution(intervals_weights*)~
--引数:~
---intervals_weights~
区間および各区間のウェイト。(intervals_weights.count%2 == 0)~
intervals_weights の前半 intervals_weights.count/2 個の要素を区間とする。~
intervals_weights の後半 intervals_weights.count/2 個の要素を各区間のウェイトとする。~

--------------------------------------------------------------------------------
-PiecewiseLinearDistribution.random メソッド &aname(PiecewiseLinearD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---PiecewiseLinearDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-PiecewiseLinearDistribution.reset メソッド &aname(PiecewiseLinearD-reset);~
 状態を初期化する。
--シグネチャ:~
---PiecewiseLinearDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-PiecewiseLinearDistribution.serialize メソッド &aname(PiecewiseLinearD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---PiecewiseLinearDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-PiecewiseLinearDistribution.deserialize メソッド &aname(PiecewiseLinearD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---PiecewiseLinearDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-PiecewiseLinearDistribution.min プロパティ &aname(PiecewiseLinearD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-PiecewiseLinearDistribution.max プロパティ &aname(PiecewiseLinearD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**TriangleDistribution クラス [#TriangleDistribution]
 三角分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[TriangleDistribution メソッド>#TriangleD-TriangleD]]~
-メソッド:~
--[[random メソッド>#TriangleD-random]]~
--[[reset メソッド>#TriangleD-reset]]~
--[[serialize メソッド>#TriangleD-serialize]]~
--[[deserialize メソッド>#TriangleD-deserialize]]~
-プロパティ:~
--[[min プロパティ>#TriangleD-min]]~
--[[max プロパティ>#TriangleD-max]]~

--------------------------------------------------------------------------------
-TriangleDistribution.TriangleDistribution メソッド &aname(TriangleD-TriangleD);~
 コンストラクタ。
--シグネチャ:~
---TriangleDistribution(a = 0, b = 0.5, c = 1)~
--引数:~
---a~
最小値。(a <= b <= c)~
---b~
最頻値。(a <= b <= c)~
---c~
最大値。(a <= b <= c)~

--------------------------------------------------------------------------------
-TriangleDistribution.random メソッド &aname(TriangleD-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---TriangleDistribution.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Real~
生成された乱数値。~

--------------------------------------------------------------------------------
-TriangleDistribution.reset メソッド &aname(TriangleD-reset);~
 状態を初期化する。
--シグネチャ:~
---TriangleDistribution.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-TriangleDistribution.serialize メソッド &aname(TriangleD-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---TriangleDistribution.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-TriangleDistribution.deserialize メソッド &aname(TriangleD-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---TriangleDistribution.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-TriangleDistribution.min プロパティ &aname(TriangleD-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-TriangleDistribution.max プロパティ &aname(TriangleD-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

**UniformOnSphere クラス [#UniformOnSphere]
 任意次元の単位球面上の分布を返す確率分布クラス。
 精度 64bit 浮動小数点数．
-メソッド:~
--[[UniformOnSphere メソッド>#UniformOnSphere-UniformOnSphere]]~
-メソッド:~
--[[random メソッド>#UniformOnSphere-random]]~
--[[reset メソッド>#UniformOnSphere-reset]]~
--[[serialize メソッド>#UniformOnSphere-serialize]]~
--[[deserialize メソッド>#UniformOnSphere-deserialize]]~
-プロパティ:~
--[[min プロパティ>#UniformOnSphere-min]]~
--[[max プロパティ>#UniformOnSphere-max]]~

--------------------------------------------------------------------------------
-UniformOnSphere.UniformOnSphere メソッド &aname(UniformOnSphere-UniformOnSphere);~
 コンストラクタ。
--シグネチャ:~
---UniformOnSphere(dim = 2)~
--引数:~
---dim~
次元。~

--------------------------------------------------------------------------------
-UniformOnSphere.random メソッド &aname(UniformOnSphere-random);~
 確率分布に従う乱数値を生成する。
--シグネチャ:~
---UniformOnSphere.random(engine)~
--引数:~
---engine~
乱数生成エンジンクラスのインスタンス。~
--返値:~
---Array~
生成された乱数値の dim 個の配列。~

--------------------------------------------------------------------------------
-UniformOnSphere.reset メソッド &aname(UniformOnSphere-reset);~
 状態を初期化する。
--シグネチャ:~
---UniformOnSphere.reset()~
--引数:~
---(なし)~
--返値:~
---(なし)~

--------------------------------------------------------------------------------
-UniformOnSphere.serialize メソッド &aname(UniformOnSphere-serialize);~
 状態を文字列として書き出す。
--シグネチャ:~
---UniformOnSphere.serialize()~
--引数:~
---(なし)~
--返値:~
---String~

--------------------------------------------------------------------------------
-UniformOnSphere.deserialize メソッド &aname(UniformOnSphere-deserialize);~
 状態を文字列から復元する。
--シグネチャ:~
---UniformOnSphere.deserialize(serialized)~
--引数:~
---serialized~
シリアライズ文字列。~
--返値:~
---(なし)~

--------------------------------------------------------------------------------

-UniformOnSphere.min プロパティ &aname(UniformOnSphere-min);~
 この分布が返す乱数値の最小値を返す。 (getter)

--------------------------------------------------------------------------------
-UniformOnSphere.max プロパティ &aname(UniformOnSphere-max);~
 この分布が返す乱数値の最大値を返す。 (getter)

--------------------------------------------------------------------------------

