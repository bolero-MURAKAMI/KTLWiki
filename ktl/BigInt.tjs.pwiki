*目次 [#contents-]
#contents



*概要 [#summaries-]
 多倍長整数など。
-パス:~
--[[ktl/BigInt.tjs]]~
-インポートスクリプト:~
--[[ktl/Sources.tjs]]~
-インポートDLL:~
--ktl_big_int.dll / ktl_big_int-d.dll(デバッグ版)~



*クラス [#class-]
-クラス:~
--[[BigInt クラス>#BigInt]]~
--[[CppInt クラス>#CppInt]]~

--------------------------------------------------------------------------------

**BigInt クラス [#BigInt]
 多倍長整数を扱うクラス。NTL バックエンドによる実装。
-メソッド:~
--[[BigInt メソッド>#BigInt-BigInt]]~
--[[assign メソッド>#BigInt-assign]]~
--[[assignAdd メソッド>#BigInt-assignAdd]]~
--[[assignSub メソッド>#BigInt-assignSub]]~
--[[assignMul メソッド>#BigInt-assignMul]]~
--[[assignDiv メソッド>#BigInt-assignDiv]]~
--[[assignMod メソッド>#BigInt-assignMod]]~
--[[assignOr メソッド>#BigInt-assignOr]]~
--[[assignAnd メソッド>#BigInt-assignAnd]]~
--[[assignXor メソッド>#BigInt-assignXor]]~
-スタティックメソッド:~
--[[opAdd メソッド>#BigInt-opAdd]]~
--[[opSub メソッド>#BigInt-opSub]]~
--[[opMul メソッド>#BigInt-opMul]]~
--[[opDiv メソッド>#BigInt-opDiv]]~
--[[opMod メソッド>#BigInt-opMod]]~
--[[opOr メソッド>#BigInt-opOr]]~
--[[opAnd メソッド>#BigInt-opAnd]]~
--[[opXor メソッド>#BigInt-opXor]]~
--[[opEq メソッド>#BigInt-opEq]]~
--[[opNEq メソッド>#BigInt-opNEq]]~
--[[opLs メソッド>#BigInt-opLs]]~
--[[opLsEq メソッド>#BigInt-opLsEq]]~
--[[opGr メソッド>#BigInt-opGr]]~
--[[opGrEq メソッド>#BigInt-opGrEq]]~
--[[opPlus メソッド>#BigInt-opPlus]]~
--[[opMinus メソッド>#BigInt-opMinus]]~
--[[abs メソッド>#BigInt-abs]]~
--[[pow メソッド>#BigInt-pow]]~
--[[gcd メソッド>#BigInt-gcd]]~
--[[max メソッド>#BigInt-max]]~
--[[min メソッド>#BigInt-min]]~
-プロパティ:~
--[[asInt プロパティ>#BigInt-asInt]]~
--[[asReal プロパティ>#BigInt-asReal]]~
--[[asString プロパティ>#BigInt-asString]]~
--[[asOctet プロパティ>#BigInt-asOctet]]~
--[[sign プロパティ>#BigInt-sign]]~

--------------------------------------------------------------------------------
-BigInt.BigInt メソッド &aname(BigInt-BigInt);~
 コンストラクタ。
--シグネチャ:~
---BigInt()~
---BigInt(v)~
---BigInt(v, sign)~
--引数:~
---v~
初期化値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---sign~
符号指定。~
正値ならばプラス符号、負値ならばマイナス符号。~
オクテット列に対してのみ指定する。~

--------------------------------------------------------------------------------
-BigInt.assign メソッド &aname(BigInt-assign);~
 値を代入する。
--シグネチャ:~
---BigInt.assign(v)~
--引数:~
---v~
代入する値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~

--------------------------------------------------------------------------------
-BigInt.assignAdd メソッド &aname(BigInt-assignAdd);~
 値を加算代入する。
--シグネチャ:~
---BigInt.assignAdd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this += v[0] += v[1] += v[2] += ...~

--------------------------------------------------------------------------------
-BigInt.assignSub メソッド &aname(BigInt-assignSub);~
 値を減算代入する。
--シグネチャ:~
---BigInt.assignSub(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this -= v[0] -= v[1] -= v[2] -= ...~

--------------------------------------------------------------------------------
-BigInt.assignMul メソッド &aname(BigInt-assignMul);~
 値を乗算代入する。
--シグネチャ:~
---BigInt.assignMul(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this *= v[0] *= v[1] *= v[2] *= ...~

--------------------------------------------------------------------------------
-BigInt.assignDiv メソッド &aname(BigInt-assignDiv);~
 値を除算代入する。
--シグネチャ:~
---BigInt.assignDiv(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this /= v[0] /= v[1] /= v[2] /= ...~

--------------------------------------------------------------------------------
-BigInt.assignMod メソッド &aname(BigInt-assignMod);~
 値を剰余代入する。
--シグネチャ:~
---BigInt.assignMod(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this %= v[0] %= v[1] %= v[2] %= ...~

--------------------------------------------------------------------------------
-BigInt.assignOr メソッド &aname(BigInt-assignOr);~
 値をビット OR 代入する。
--シグネチャ:~
---BigInt.assignOr(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this |= v[0] |= v[1] |= v[2] |= ...~

--------------------------------------------------------------------------------
-BigInt.assignAnd メソッド &aname(BigInt-assignAnd);~
 値をビット AND 代入する。
--シグネチャ:~
---BigInt.assignAnd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this &= v[0] &= v[1] &= v[2] &= ...~

--------------------------------------------------------------------------------
-BigInt.assignXor メソッド &aname(BigInt-assignXor);~
 値を加算する。
--シグネチャ:~
---BigInt.assignXor(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
自分自身のインスタンス。~
--注記:~
this ^= v[0] ^= v[1] ^= v[2] ^= ...~

--------------------------------------------------------------------------------
-BigInt.opAdd メソッド &aname(BigInt-opAdd);~
 値を多倍長整数として加算して返す。
--シグネチャ:~
---BigInt.opAdd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] + v[1] + v[2] + ...~

--------------------------------------------------------------------------------
-BigInt.opSub メソッド &aname(BigInt-opSub);~
 値を多倍長整数として減算して返す。
--シグネチャ:~
---BigInt.opSub(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] - v[1] - v[2] - ...~

--------------------------------------------------------------------------------
-BigInt.opMul メソッド &aname(BigInt-opMul);~
 値を多倍長整数として乗算して返す。
--シグネチャ:~
---BigInt.opMul(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] * v[1] * v[2] * ...~

--------------------------------------------------------------------------------
-BigInt.opDiv メソッド &aname(BigInt-opDiv);~
 値を多倍長整数として除算して返す。
--シグネチャ:~
---BigInt.opDiv(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] / v[1] / v[2] / ...~

--------------------------------------------------------------------------------
-BigInt.opMod メソッド &aname(BigInt-opMod);~
 値を多倍長整数として剰余算して返す。
--シグネチャ:~
---BigInt.opMod(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] % v[1] % v[2] % ...~

--------------------------------------------------------------------------------
-BigInt.opOr メソッド &aname(BigInt-opOr);~
 値を多倍長整数としてビット OR して返す。
--シグネチャ:~
---BigInt.opOr(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] | v[1] | v[2] | ...~

--------------------------------------------------------------------------------
-BigInt.opAnd メソッド &aname(BigInt-opAnd);~
 値を多倍長整数としてビット AND して返す。
--シグネチャ:~
---BigInt.opAnd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] & v[1] & v[2] & ...~

--------------------------------------------------------------------------------
-BigInt.opXor メソッド &aname(BigInt-opXor);~
 値を多倍長整数としてビット XOR して返す。
--シグネチャ:~
---BigInt.opXor(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~
--注記:~
v[0] ^ v[1] ^ v[2] ^ ...~

--------------------------------------------------------------------------------
-BigInt.opEq メソッド &aname(BigInt-opEq);~
 値を多倍長整数として等価であるか比較する。
--シグネチャ:~
---BigInt.opEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべて等価だった場合。~
---false~
オペランドが等価でなかった場合。~

--------------------------------------------------------------------------------
-BigInt.opNEq メソッド &aname(BigInt-opNEq);~
 値を多倍長整数として非等価であるか比較する。
--シグネチャ:~
---BigInt.opEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべて互いに非等価（ユニーク）だった場合。~
---false~
オペランドが非等価でなかった場合。~

--------------------------------------------------------------------------------
-BigInt.opLs メソッド &aname(BigInt-opLs);~
 値を多倍長整数として小なりであるか比較する。
--シグネチャ:~
---BigInt.opLs(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に小なりだった場合。~
---false~
オペランドが小なりでなかった場合。~

--------------------------------------------------------------------------------
-BigInt.opLsEq メソッド &aname(BigInt-opLsEq);~
 値を多倍長整数として小なりイコールであるか比較する。
--シグネチャ:~
---BigInt.opLsEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に小なりイコールだった場合。~
---false~
オペランドが小なりイコールでなかった場合。~

--------------------------------------------------------------------------------
-BigInt.opGr メソッド &aname(BigInt-opGr);~
 値を多倍長整数として大なりであるか比較する。
--シグネチャ:~
---BigInt.opGr(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に大なりだった場合。~
---false~
オペランドが大なりでなかった場合。~

--------------------------------------------------------------------------------
-BigInt.opGrEq メソッド &aname(BigInt-opGrEq);~
 値を多倍長整数として大なりイコールであるか比較する。
--シグネチャ:~
---BigInt.opGrEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に大なりイコールだった場合。~
---false~
オペランドが大なりイコールでなかった場合。~

--------------------------------------------------------------------------------
-BigInt.opPlus メソッド &aname(BigInt-opPlus);~
 値を多倍長整数として返す。
--シグネチャ:~
---BigInt.opPlus(v)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.opMinus メソッド &aname(BigInt-opMinus);~
 値を多倍長整数として符号反転して返す。
--シグネチャ:~
---BigInt.opMinus(v)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.abs メソッド &aname(BigInt-abs);~
 値を多倍長整数として絶対値を返す。
--シグネチャ:~
---BigInt.abs(v)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.pow メソッド &aname(BigInt-pow);~
 値を多倍長整数として冪乗を返す。
--シグネチャ:~
---BigInt.pow(v, e)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---e~
指数の値。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.gcd メソッド &aname(BigInt-gcd);~
 値を多倍長整数として最大公約数を返す。
--シグネチャ:~
---BigInt.gcd(v1, v2)~
--引数:~
---v1~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---v2~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.max メソッド &aname(BigInt-max);~
 値を多倍長整数として大きい方を返す。
--シグネチャ:~
---BigInt.max(v1, v2)~
--引数:~
---v1~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---v2~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.min メソッド &aname(BigInt-min);~
 値を多倍長整数として小さい方を返す。
--シグネチャ:~
---BigInt.max(v1, v2)~
--引数:~
---v1~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---v2~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---BigInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-BigInt.asInt プロパティ &aname(BigInt-asInt);~
 整数値として取得する。 (getter)

--------------------------------------------------------------------------------
-BigInt.asReal プロパティ &aname(BigInt-asReal);~
 実数値として取得する。 (getter)

--------------------------------------------------------------------------------
-BigInt.asString プロパティ &aname(BigInt-asString);~
 文字列として取得する。 (getter)

--------------------------------------------------------------------------------
-BigInt.asOctet プロパティ &aname(BigInt-asOctet);~
 リトルエンディアンによる整数表現のオクテット列として取得する。 (getter)

--------------------------------------------------------------------------------
-BigInt.sign プロパティ &aname(BigInt-sign);~
 値が 0 ならば 0、正値ならば正値、負値ならば負値を返す。 (getter)

--------------------------------------------------------------------------------

**CppInt クラス [#CppInt]
 多倍長整数を扱うクラス。Boost.Multiprecision の cpp_int バックエンドによる実装。
-メソッド:~
--[[CppInt メソッド>#CppInt-CppInt]]~
--[[assign メソッド>#CppInt-assign]]~
--[[assignAdd メソッド>#CppInt-assignAdd]]~
--[[assignSub メソッド>#CppInt-assignSub]]~
--[[assignMul メソッド>#CppInt-assignMul]]~
--[[assignDiv メソッド>#CppInt-assignDiv]]~
--[[assignMod メソッド>#CppInt-assignMod]]~
--[[assignOr メソッド>#CppInt-assignOr]]~
--[[assignAnd メソッド>#CppInt-assignAnd]]~
--[[assignXor メソッド>#CppInt-assignXor]]~
-スタティックメソッド:~
--[[opAdd メソッド>#CppInt-opAdd]]~
--[[opSub メソッド>#CppInt-opSub]]~
--[[opMul メソッド>#CppInt-opMul]]~
--[[opDiv メソッド>#CppInt-opDiv]]~
--[[opMod メソッド>#CppInt-opMod]]~
--[[opOr メソッド>#CppInt-opOr]]~
--[[opAnd メソッド>#CppInt-opAnd]]~
--[[opXor メソッド>#CppInt-opXor]]~
--[[opEq メソッド>#CppInt-opEq]]~
--[[opNEq メソッド>#CppInt-opNEq]]~
--[[opLs メソッド>#CppInt-opLs]]~
--[[opLsEq メソッド>#CppInt-opLsEq]]~
--[[opGr メソッド>#CppInt-opGr]]~
--[[opGrEq メソッド>#CppInt-opGrEq]]~
--[[opPlus メソッド>#CppInt-opPlus]]~
--[[opMinus メソッド>#CppInt-opMinus]]~
--[[abs メソッド>#CppInt-abs]]~
--[[pow メソッド>#CppInt-pow]]~
--[[gcd メソッド>#CppInt-gcd]]~
--[[max メソッド>#CppInt-max]]~
--[[min メソッド>#CppInt-min]]~
-プロパティ:~
--[[asInt プロパティ>#CppInt-asInt]]~
--[[asReal プロパティ>#CppInt-asReal]]~
--[[asString プロパティ>#CppInt-asString]]~
--[[asOctet プロパティ>#CppInt-asOctet]]~
--[[sign プロパティ>#CppInt-sign]]~

--------------------------------------------------------------------------------
-CppInt.CppInt メソッド &aname(CppInt-CppInt);~
 コンストラクタ。
--シグネチャ:~
---CppInt()~
---CppInt(v)~
---CppInt(v, sign)~
--引数:~
---v~
初期化値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---sign~
符号指定。~
正値ならばプラス符号、負値ならばマイナス符号。~
オクテット列に対してのみ指定する。~

--------------------------------------------------------------------------------
-CppInt.assign メソッド &aname(CppInt-assign);~
 値を代入する。
--シグネチャ:~
---CppInt.assign(v)~
--引数:~
---v~
代入する値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~

--------------------------------------------------------------------------------
-CppInt.assignAdd メソッド &aname(CppInt-assignAdd);~
 値を加算代入する。
--シグネチャ:~
---CppInt.assignAdd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this += v[0] += v[1] += v[2] += ...~

--------------------------------------------------------------------------------
-CppInt.assignSub メソッド &aname(CppInt-assignSub);~
 値を減算代入する。
--シグネチャ:~
---CppInt.assignSub(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this -= v[0] -= v[1] -= v[2] -= ...~

--------------------------------------------------------------------------------
-CppInt.assignMul メソッド &aname(CppInt-assignMul);~
 値を乗算代入する。
--シグネチャ:~
---CppInt.assignMul(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this *= v[0] *= v[1] *= v[2] *= ...~

--------------------------------------------------------------------------------
-CppInt.assignDiv メソッド &aname(CppInt-assignDiv);~
 値を除算代入する。
--シグネチャ:~
---CppInt.assignDiv(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this /= v[0] /= v[1] /= v[2] /= ...~

--------------------------------------------------------------------------------
-CppInt.assignMod メソッド &aname(CppInt-assignMod);~
 値を剰余代入する。
--シグネチャ:~
---CppInt.assignMod(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this %= v[0] %= v[1] %= v[2] %= ...~

--------------------------------------------------------------------------------
-CppInt.assignOr メソッド &aname(CppInt-assignOr);~
 値をビット OR 代入する。
--シグネチャ:~
---CppInt.assignOr(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this |= v[0] |= v[1] |= v[2] |= ...~

--------------------------------------------------------------------------------
-CppInt.assignAnd メソッド &aname(CppInt-assignAnd);~
 値をビット AND 代入する。
--シグネチャ:~
---CppInt.assignAnd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this &= v[0] &= v[1] &= v[2] &= ...~

--------------------------------------------------------------------------------
-CppInt.assignXor メソッド &aname(CppInt-assignXor);~
 値を加算する。
--シグネチャ:~
---CppInt.assignXor(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
自分自身のインスタンス。~
--注記:~
this ^= v[0] ^= v[1] ^= v[2] ^= ...~

--------------------------------------------------------------------------------
-CppInt.opAdd メソッド &aname(CppInt-opAdd);~
 値を多倍長整数として加算して返す。
--シグネチャ:~
---CppInt.opAdd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] + v[1] + v[2] + ...~

--------------------------------------------------------------------------------
-CppInt.opSub メソッド &aname(CppInt-opSub);~
 値を多倍長整数として減算して返す。
--シグネチャ:~
---CppInt.opSub(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] - v[1] - v[2] - ...~

--------------------------------------------------------------------------------
-CppInt.opMul メソッド &aname(CppInt-opMul);~
 値を多倍長整数として乗算して返す。
--シグネチャ:~
---CppInt.opMul(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] * v[1] * v[2] * ...~

--------------------------------------------------------------------------------
-CppInt.opDiv メソッド &aname(CppInt-opDiv);~
 値を多倍長整数として除算して返す。
--シグネチャ:~
---CppInt.opDiv(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] / v[1] / v[2] / ...~

--------------------------------------------------------------------------------
-CppInt.opMod メソッド &aname(CppInt-opMod);~
 値を多倍長整数として剰余算して返す。
--シグネチャ:~
---CppInt.opMod(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] % v[1] % v[2] % ...~

--------------------------------------------------------------------------------
-CppInt.opOr メソッド &aname(CppInt-opOr);~
 値を多倍長整数としてビット OR して返す。
--シグネチャ:~
---CppInt.opOr(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] | v[1] | v[2] | ...~

--------------------------------------------------------------------------------
-CppInt.opAnd メソッド &aname(CppInt-opAnd);~
 値を多倍長整数としてビット AND して返す。
--シグネチャ:~
---CppInt.opAnd(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] & v[1] & v[2] & ...~

--------------------------------------------------------------------------------
-CppInt.opXor メソッド &aname(CppInt-opXor);~
 値を多倍長整数としてビット XOR して返す。
--シグネチャ:~
---CppInt.opXor(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~
--注記:~
v[0] ^ v[1] ^ v[2] ^ ...~

--------------------------------------------------------------------------------
-CppInt.opEq メソッド &aname(CppInt-opEq);~
 値を多倍長整数として等価であるか比較する。
--シグネチャ:~
---CppInt.opEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべて等価だった場合。~
---false~
オペランドが等価でなかった場合。~

--------------------------------------------------------------------------------
-CppInt.opNEq メソッド &aname(CppInt-opNEq);~
 値を多倍長整数として非等価であるか比較する。
--シグネチャ:~
---CppInt.opEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべて互いに非等価（ユニーク）だった場合。~
---false~
オペランドが非等価でなかった場合。~

--------------------------------------------------------------------------------
-CppInt.opLs メソッド &aname(CppInt-opLs);~
 値を多倍長整数として小なりであるか比較する。
--シグネチャ:~
---CppInt.opLs(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に小なりだった場合。~
---false~
オペランドが小なりでなかった場合。~

--------------------------------------------------------------------------------
-CppInt.opLsEq メソッド &aname(CppInt-opLsEq);~
 値を多倍長整数として小なりイコールであるか比較する。
--シグネチャ:~
---CppInt.opLsEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に小なりイコールだった場合。~
---false~
オペランドが小なりイコールでなかった場合。~

--------------------------------------------------------------------------------
-CppInt.opGr メソッド &aname(CppInt-opGr);~
 値を多倍長整数として大なりであるか比較する。
--シグネチャ:~
---CppInt.opGr(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に大なりだった場合。~
---false~
オペランドが大なりでなかった場合。~

--------------------------------------------------------------------------------
-CppInt.opGrEq メソッド &aname(CppInt-opGrEq);~
 値を多倍長整数として大なりイコールであるか比較する。
--シグネチャ:~
---CppInt.opGrEq(v*)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---true~
オペランドがすべてこの順に大なりイコールだった場合。~
---false~
オペランドが大なりイコールでなかった場合。~

--------------------------------------------------------------------------------
-CppInt.opPlus メソッド &aname(CppInt-opPlus);~
 値を多倍長整数として返す。
--シグネチャ:~
---CppInt.opPlus(v)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.opMinus メソッド &aname(CppInt-opMinus);~
 値を多倍長整数として符号反転して返す。
--シグネチャ:~
---CppInt.opMinus(v)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.abs メソッド &aname(CppInt-abs);~
 値を多倍長整数として絶対値を返す。
--シグネチャ:~
---CppInt.abs(v)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.pow メソッド &aname(CppInt-pow);~
 値を多倍長整数として冪乗を返す。
--シグネチャ:~
---CppInt.pow(v, e)~
--引数:~
---v~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---e~
指数の値。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.gcd メソッド &aname(CppInt-gcd);~
 値を多倍長整数として最大公約数を返す。
--シグネチャ:~
---CppInt.gcd(v1, v2)~
--引数:~
---v1~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---v2~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.max メソッド &aname(CppInt-max);~
 値を多倍長整数として大きい方を返す。
--シグネチャ:~
---CppInt.max(v1, v2)~
--引数:~
---v1~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---v2~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.min メソッド &aname(CppInt-min);~
 値を多倍長整数として小さい方を返す。
--シグネチャ:~
---CppInt.max(v1, v2)~
--引数:~
---v1~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
---v2~
オペランドの値。~
オクテット列は、リトルエンディアンによる整数表現に解釈される。~
--返値:~
---CppInt~
生成されたインスタンス。~

--------------------------------------------------------------------------------
-CppInt.asInt プロパティ &aname(CppInt-asInt);~
 整数値として取得する。 (getter)

--------------------------------------------------------------------------------
-CppInt.asReal プロパティ &aname(CppInt-asReal);~
 実数値として取得する。 (getter)

--------------------------------------------------------------------------------
-CppInt.asString プロパティ &aname(CppInt-asString);~
 文字列として取得する。 (getter)

--------------------------------------------------------------------------------
-CppInt.asOctet プロパティ &aname(CppInt-asOctet);~
 リトルエンディアンによる整数表現のオクテット列として取得する。 (getter)

--------------------------------------------------------------------------------
-CppInt.sign プロパティ &aname(CppInt-sign);~
 値が 0 ならば 0、正値ならば正値、負値ならば負値を返す。 (getter)

--------------------------------------------------------------------------------
