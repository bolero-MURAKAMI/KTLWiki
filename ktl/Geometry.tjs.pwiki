*目次 [#contents-]
#contents



*概要 [#summaries-]
 様々な幾何計算など。
-パス:~
--[[ktl/Geometry.tjs]]~
-インポートスクリプト:~
--[[ktl/Sources.tjs]]~
-インポートDLL:~
--ktl_geometry.dll / ktl_geometry-d.dll(デバッグ版)~



*クラス [#class-]
-クラス:~
--[[Geometry クラス>#Geometry]]~

--------------------------------------------------------------------------------

**Geometry クラス [#Geometry]
 様々な幾何計算などを行うクラス。
 このクラスは System クラスなどと同じように、インスタンスを作成する必要はない。
-スタティックメソッド:~

> (図形の性質)~

--[[isValid メソッド>#Geometry-isValid]]~
--[[isSimple メソッド>#Geometry-isSimple]]~
--[[length メソッド>#Geometry-length]]~
--[[perimeter メソッド>#Geometry-perimeter]]~
--[[area メソッド>#Geometry-area]]~
--[[centroid メソッド>#Geometry-centroid]]~
--[[translate メソッド>#Geometry-translate]]~
--[[scale メソッド>#Geometry-scale]]~
--[[rotate メソッド>#Geometry-rotate]]~
--[[matrixTransform メソッド>#Geometry-matrixTransform]]~

> (図形同士の関係)~

--[[disjoint メソッド>#Geometry-disjoint]]~
--[[intersects メソッド>#Geometry-intersects]]~
--[[coveredBy メソッド>#Geometry-coveredBy]]~
--[[within メソッド>#Geometry-within]]~
--[[equals メソッド>#Geometry-equals]]~
--[[overlaps メソッド>#Geometry-overlaps]]~
--[[distance メソッド>#Geometry-distance]]~

-スタティックプロパティ:~
--[[gmfPoint プロパティ>#Geometry-gmfPoint]]~
--[[gmfSegment プロパティ>#Geometry-gmfSegment]]~
--[[gmfBox プロパティ>#Geometry-gmfBox]]~
--[[gmfLinestring プロパティ>#Geometry-gmfLinestring]]~
--[[gmfRing プロパティ>#Geometry-gmfRing]]~
--[[gmfPolygon プロパティ>#Geometry-gmfPolygon]]~
--[[gmfMultiPoint プロパティ>#Geometry-gmfMultiPoint]]~
--[[gmfMultiLinestring プロパティ>#Geometry-gmfMultiLinestring]]~
--[[gmfMultiPolygon プロパティ>#Geometry-gmfMultiPolygon]]~

--------------------------------------------------------------------------------
-Geometry.isValid メソッド &aname(Geometry-isValid);~
 図形が（破綻のない）有効な図形であるかを返す。
--シグネチャ:~
---Geometry.isValid(g, f)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
--返値:~
---true~
有効な図形である場合。~
---false~
有効な図形でない場合。~

--------------------------------------------------------------------------------
-Geometry.isSimple メソッド &aname(Geometry-isSimple);~
 図形が単純な図形であるかを返す。
--シグネチャ:~
---Geometry.isSimple(g, f)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
--返値:~
---true~
単純な図形である場合。~
---false~
単純な図形でない場合。~

--------------------------------------------------------------------------------
-Geometry.length メソッド &aname(Geometry-length);~
 図形の長さを返す。
--シグネチャ:~
---Geometry.length(g, f)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
--返値:~
---Real~
図形の長さ。~
--注記:~
領域を持った図形（e.g. Ring）に対して、この関数は常に 0 を返す。~
領域を持った図形に対しては [[Geometry.perimeter メソッド>#Geometry-perimeter]] を使用できる。~

--------------------------------------------------------------------------------
-Geometry.perimeter メソッド &aname(Geometry-perimeter);~
 図形の外周長を返す。
--シグネチャ:~
---Geometry.perimeter(g, f)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
--返値:~
---Real~
図形の外周長。~

--------------------------------------------------------------------------------
-Geometry.area メソッド &aname(Geometry-area);~
 図形の面積を返す。
--シグネチャ:~
---Geometry.area(g, f)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
--返値:~
---Real~
図形の面積。~
--注記:~
領域を持たない図形（e.g. Linestring）に対して、この関数は常に 0 を返す。~

--------------------------------------------------------------------------------
-Geometry.centroid メソッド &aname(Geometry-centroid);~
 図形の中心点を返す。
--シグネチャ:~
---Geometry.centroid(g, f)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
--返値:~
---Array~
図形の中心点。~
 [ x, y ]

--------------------------------------------------------------------------------
-Geometry.translate メソッド &aname(Geometry-translate);~
 図形を移動したデータを返す。
--シグネチャ:~
---Geometry.translate(g, f, param)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
---param~
移動量。~
 [ x, y ]
--返値:~
---Array~
移動した図形データ。~
入力と同じ形式を返す。~

--------------------------------------------------------------------------------
-Geometry.scale メソッド &aname(Geometry-scale);~
 図形を拡大縮小したデータを返す。
--シグネチャ:~
---Geometry.scale(g, f, param)~
---Geometry.scale(g, f, param, center)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
---param~
拡大縮小倍率。~
 [ x_rate, y_rate ]
 xy_rate
一つの値を指定した場合はXY方向とも同じ倍率となる。~
---center~
変形の中心点。~
 [ x, y ]
省略時は [ 0, 0 ] を中心に変形する。
--返値:~
---Array~
拡大縮小した図形データ。~
入力と同じ形式を返す。~

--------------------------------------------------------------------------------
-Geometry.rotate メソッド &aname(Geometry-rotate);~
 図形を回転したデータを返す。
--シグネチャ:~
---Geometry.rotate(g, f, param)~
---Geometry.rotate(g, f, param, center)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
---param~
回転量（ラジアン）。~
---center~
変形の中心点。~
 [ x, y ]
省略時は [ 0, 0 ] を中心に変形する。
--返値:~
---Array~
回転した図形データ。~
入力と同じ形式を返す。~

--------------------------------------------------------------------------------
-Geometry.matrixTransform メソッド &aname(Geometry-matrixTransform);~
 図形を行列によって変形したデータを返す。
--シグネチャ:~
---Geometry.matrixTransform(g, f, param)~
--引数:~
---g~
図形データ。~
---f~
図形の分類フラグ。~
---param~
3×3の行列。~
 [
   [ a00, a01, a02 ],
   [ a10, a11, a12 ],
   [ a20, a21, a22 ]
 ]
--返値:~
---Array~
行列によって変形した図形データ。~
入力と同じ形式を返す。~

--------------------------------------------------------------------------------
-Geometry.disjoint メソッド &aname(Geometry-disjoint);~
 図形同士が互いに素であるかを返す。
--シグネチャ:~
---Geometry.disjoint(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---true~
互いに素である場合。~
---false~
互いに素でない場合。~

--------------------------------------------------------------------------------
-Geometry.intersects メソッド &aname(Geometry-intersects);~
 図形同士が交差点を持っているかを返す。
--シグネチャ:~
---Geometry.intersects(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---true~
交差点を持っている場合。~
---false~
交差点を持っていない場合。~

--------------------------------------------------------------------------------
-Geometry.coveredBy メソッド &aname(Geometry-coveredBy);~
 図形Ａが図形Ｂの内部または境界線上にあるかを返す。
--シグネチャ:~
---Geometry.coveredBy(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---true~
内部または境界線上にある場合。~
---false~
内部または境界線上にない場合。~

--------------------------------------------------------------------------------
-Geometry.within メソッド &aname(Geometry-within);~
 図形Ａが図形Ｂの内部にあるかを返す。
--シグネチャ:~
---Geometry.within(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---true~
内部にある場合。~
---false~
内部にない場合。~

--------------------------------------------------------------------------------
-Geometry.equals メソッド &aname(Geometry-equals);~
 図形同士が空間的に等しいかを返す。
--シグネチャ:~
---Geometry.equals(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---true~
空間的に等しい場合。~
---false~
空間的に等しくない場合。~

--------------------------------------------------------------------------------
-Geometry.overlaps メソッド &aname(Geometry-overlaps);~
 図形同士が重なっているかを返す。
--シグネチャ:~
---Geometry.overlaps(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---true~
重なっている場合。~
---false~
重なっていない場合。~

--------------------------------------------------------------------------------
-Geometry.distance メソッド &aname(Geometry-distance);~
 図形同士の距離を返す。
--シグネチャ:~
---Geometry.distance(g0, f0, g1, f1)~
--引数:~
---g0~
図形Ａデータ。~
---f0~
図形Ａの分類フラグ。~
---g1~
図形Ｂデータ。~
---f1~
図形Ｂの分類フラグ。~
--返値:~
---Real~
距離。~

--------------------------------------------------------------------------------
-Geometry.gmfPoint プロパティ &aname(Geometry-gmfPoint);~
 データが点であることを表す分類フラグ。 (getter)
--注記:~
点は、二つの成分からなる配列で表現される。~
 [ x, y ]

--------------------------------------------------------------------------------
-Geometry.gmfPoint プロパティ &aname(Geometry-gmfPoint);~
 データが点であることを表す分類フラグ。 (getter)
--注記:~
点は、二つの成分からなる配列で表現される。~
 [ x, y ]

--------------------------------------------------------------------------------
-Geometry.gmfPoint プロパティ &aname(Geometry-gmfPoint);~
 データが点であることを表す分類フラグ。 (getter)
--注記:~
点は、二つの成分からなる配列で表現される。~
 [ x, y ]

--------------------------------------------------------------------------------
-Geometry.gmfSegment プロパティ &aname(Geometry-gmfSegment);~
 データが線分であることを表す分類フラグ。 (getter)
--注記:~
線分は、二つの点（始点と終点）からなる配列で表現される。~
 [ [ x0, y0 ], [ x1, y1 ] ]

--------------------------------------------------------------------------------
-Geometry.gmfBox プロパティ &aname(Geometry-gmfBox);~
 データが矩形であることを表す分類フラグ。 (getter)
--注記:~
矩形は、二つの点（最小コーナーと最大コーナー）からなる配列で表現される。~
 [ [ left, top ], [ right, bottom ] ]

--------------------------------------------------------------------------------
-Geometry.gmfLinestring プロパティ &aname(Geometry-gmfLinestring);~
 データが連続した線分であることを表す分類フラグ。 (getter)
--注記:~
連続した線分は、一つ以上の点からなる配列で表現される。~
 [ [ x0, y0 ], [ x1, y1 ], [ x2, y2 ], ..., [ xn, yn ] ]

--------------------------------------------------------------------------------
-Geometry.gmfRing プロパティ &aname(Geometry-gmfRing);~
 データが領域を持った境界であることを表す分類フラグ。 (getter)
--注記:~
領域を持った境界は、一つ以上の点からなる配列で表現される。~
 [ [ x0, y0 ], [ x1, y1 ], [ x2, y2 ], ..., [ xn, yn ] ]

--------------------------------------------------------------------------------
-Geometry.gmfPolygon プロパティ &aname(Geometry-gmfPolygon);~
 データが領域を持った多角形であることを表す分類フラグ。 (getter)
--注記:~
領域を持った多角形は、「一つの外部境界」と「ゼロ個以上の内部境界の配列」からなる配列で表現される。~
 [
   /* 外部境界 */
   [ [ x0, y0 ], [ x1, y1 ], [ x2, y2 ], ..., [ xn, yn ] ],
   [ 
     /* 内部境界の配列 */
     [ [ ix00, iy00 ], [ ix01, y01 ], [ ix02, iy02 ], ..., [ ix0m, iy0m ] ],
     [ [ ix10, iy10 ], [ ix11, y11 ], [ ix12, iy12 ], ..., [ ix1m, iy1m ] ],
     ...,
     [ [ ixl0, iyl0 ], [ ixl1, yl1 ], [ ixl2, iyl2 ], ..., [ ixlm, iylm ] ]
   ]
 ]

--------------------------------------------------------------------------------
-Geometry.gmfMultiPoint プロパティ &aname(Geometry-gmfMultiPoint);~
 データが点の配列であることを表す分類フラグ。 (getter)

--------------------------------------------------------------------------------
-Geometry.gmfMultiLinestring プロパティ &aname(Geometry-gmfMultiLinestring);~
 データが連続した線分の配列であることを表す分類フラグ。 (getter)

--------------------------------------------------------------------------------
-Geometry.gmfMultiPolygon プロパティ &aname(Geometry-gmfMultiPolygon);~
 データが多角形の配列であることを表す分類フラグ。 (getter)

--------------------------------------------------------------------------------

