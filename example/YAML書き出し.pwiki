*目次 [#contents-]
#contents



*概要
-必要DLL~
--ktl_ptree.dll（または ktl_ptree-d.dll）~

-外部DLL~
--icudt46.dll %%icudt45.dll%% %%icudt44.dll%% (2011/02/03 更新)~
--icuuc46.dll %%（または icuuc46d.dll）%% %%icuuc44.dll（または icuuc44d.dll）%% %%icuuc45.dll（または icuuc45d.dll）%% (2011/02/03 更新)~

-スクリプト~
--[[ktl/PTree.tjs]]~

-クラス~
--PTree クラス~



*YAML書き出し
 /* スクリプトのロード */
 Scripts.execStorage("ktl/PTree.tjs");
 
 /* PTree のインスタンス作成 */
 var ptree = new PTree();
 
 /*
     ...読み込み、操作など...
 */
 
 /* settings.yaml へ書き出し */
 ptree.writeStorageYAML(System.exePath + "settings.yaml", "UTF-8", PTree.efYAMLMultiDocument);

-PTree クラス~
--XML,JSON等のような構造化データの読み書きや操作を行う。~

-PTree.writeStorageYAML メソッド~
--シグネチャ:~
---PTree.writeYAMLToOctet(storage, code = "UTF-16", flag = 0)~
--木構造をYAMLで、ローカルストレージへ書き出す。~
--第１引数にはストレージのパス文字列を渡す。~
--第２引数には、エンコードする文字コード名を渡すことができる(デフォルト=UTF-16)。~
--第３引数には、書き出しフラグを渡すことができる(デフォルト=0)。~
--成功した場合は書き込まれたバイト数、失敗した場合は負値を返す。~

-PTree.writeYAMLToString メソッド~
--シグネチャ:~
---PTree.writeYAMLToString(flag = 0)~
--木構造をYAMLで、文字列へ書き出す。~
--第１引数には、書き出しフラグを渡すことができる(デフォルト=0)。~
--失敗した場合は void を返す。~

-PTree.writeYAMLToOctet メソッド~
--シグネチャ:~
---PTree.writeYAMLToOctet(code, flag = 0)~
--木構造をYAMLで、オクテット列へ書き出す。~
--第１引数には、エンコードする文字コード名を渡す。~
--第２引数には、書き出しフラグを渡すことができる(デフォルト=0)。~
--失敗した場合は void を返す。~

-PTree.efYAMLMultiDocument プロパティ~
--YAMLの書き出しフラグ。~
--ルートの直接の子要素をそれぞれ、"---"で区切られた複数のドキュメントとして書き出す。~
--この場合ルートの直接の子要素は、キーと要素の値を持っていてはならない。~



*YAML書き出しの挙動
-複数のドキュメント~
--ルートの直接の子要素がキーと要素の値を持たないならば、PTree.efYAMLMultiDocument フラグで複数のドキュメントとして書き出すことができる。~
 ""
 {
    node foobar
 }
 ""
 {
    node foobar
 }
↓~
 ---
 - node: foobar
 - node: foobar
(PTree.efYAMLMultiDocument が指定された場合)~
 ---
 node: foobar
 ---
 node: foobar

