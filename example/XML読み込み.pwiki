*目次 [#contents-]
#contents



*概要
-必要DLL~
--ktl_ptree.dll（または ktl_ptree-d.dll）~

-外部DLL~
--icudt46.dll %%icudt45.dll%% %%icudt44.dll%% (2011/02/03 更新)~
--icuuc46.dll %%（または icuuc46d.dll）%% %%icuuc44.dll（または icuuc44d.dll）%% %%icuuc45.dll（または icuuc45d.dll）%% (2011/02/03 更新)~

-スクリプト~
--[[ktl/PTree.tjs]]~

-クラス~
--PTree クラス~



*XML読み込み
 /* スクリプトのロード */
 Scripts.execStorage("ktl/PTree.tjs");
 
 /* PTree のインスタンス作成 */
 var ptree = new PTree();
 
 /* settings.xml の読み込み */
 ptree.readStorageXML(System.exePath + "settings.xml", "UTF-8", PTree.pfXMLNoComments);
 
 /* 一般的に不要なXMLの情報を除去 */
 ptree.trimXML();

-PTree クラス~
--XML,JSON等のような構造化データの読み書きや操作を行う。~

-PTree.readXML メソッド~
--シグネチャ:~
---PTree.readXML(str, flag = 0)~
---PTree.readXML(octet, code, flag = 0)~
--文字列またはオクテット列から、XMLを読み込む。~
--第１引数にはソースとなる文字列またはオクテット列を渡す。~
--ソースがオクテット列の場合、第２引数にはオクテット列が表現する文字コード名を渡す。~
--第２引数または第３引数には、読み込みフラグを渡すことができる。~
--処理に成功した場合はtrue、失敗した場合はfalseを返す。~

-PTree.readStorageXML メソッド~
--シグネチャ:~
---PTree.readStorageXML(storage, flag = 0)~
---PTree.readStorageXML(storage, code, flag = 0)~
--ローカルストレージから、XMLを読み込む。~
--第１引数にはストレージのパス文字列を渡す。~
--第２引数にはストレージの内容が表現する文字コード名を渡すことができる。~
--第２引数または第３引数には、読み込みフラグを渡すことができる。~
--処理に成功した場合はtrue、失敗した場合はfalseを返す。~

-PTree.pfXMLNoConcatText プロパティ~
--XMLの読み込みフラグ。~
--素の文字列データを"<xmltext>"要素の子として読み込む。~
--ビット演算で他のフラグと組み合わせることができる。~
--(他の形式との互換性のため非推奨)~

-PTree.pfXMLNoComments プロパティ~
--XMLの読み込みフラグ。~
--デフォルトでXMLコメントもパースされる動作を抑制する。~
--これを指定しなかった場合、XMLコメントは"<xmlcomment>"要素の子として読み込む。~
--ビット演算で他のフラグと組み合わせることができる。~

-PTree.pfXMLTrimWhitespace プロパティ~
--XMLの読み込みフラグ。~
--素の文字列データの前後のスペースを除去する。~
--ビット演算で他のフラグと組み合わせることができる。~
--(空白文字以外が除去される場合があるバグのため非推奨)~

-PTree.trimXML メソッド~
--シグネチャ:~
---PTree.trimXML()~
--一般的に不要なXMLの情報を除去する。~
--具体的には、"<xmlcomment>"要素の除去、"<xmltext>"要素の文字列データを親に付け替え、~
および終端ノードの要素以外の文字列データを除去を行う。~
--処理に成功した場合はtrue、失敗した場合はfalseを返す。~



*XML読み込みの挙動
-XMLコメント~
--以下のような木構造にパースされる。~
 <!--foobar-->
 <node />
↓~
 <xmlcomment> foobar
 node
(PTree.pfXMLNoComments が指定された場合)~
 node

-XMLテキスト~
--以下のような木構造にパースされる。~
 <node>foobar</node>
↓~
 node foobar
(PTree.pfXMLNoConcatText が指定された場合)~
 node
 {
     <xmltext> foobar
 }

-XML属性~
--以下のような木構造にパースされる。~
 <node name="value" />
↓~
 node
 {
     <xmlattr>
     {
         name value
     }
 }

-スペース~
--XMLの仕様によれば、インデントのための空白文字もパースに含まれる。~
--以下の例では<child>の前のインデントは、連結されたうえで<parent>の文字列データとして扱われる。~
 <parent>
     <child>foobar</child>
     <child>foobar</child>
 </parent>
↓~
 parent "        " // ←パースされた空白文字
 {
     child foobar
     child foobar
 }
--このような一般的に不要な空白文字は、PTree.trimXML メソッドで除去することができる。~

-XML特殊文字／エスケープ~
--XML特殊文字やエスケープシーケンスは、対応した文字へ適切に変換される。~
 <node>&lt;&nbsp;&gt;</node>
↓
 node "< >"

